<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>迟然</title>
  <icon>https://www.gravatar.com/avatar/1492c2c42ddd190f8426a8b5b2821427</icon>
  <subtitle>世上的路有很多条.</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2024-06-02T02:54:08.974Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>迟然</name>
    <email>CheerfulChen5@gmail.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>EEE104-Lecture 3</title>
    <link href="http://example.com/2024/06/02/EEE104-Lecture%203/"/>
    <id>http://example.com/2024/06/02/EEE104-Lecture%203/</id>
    <published>2024-06-02T02:49:45.000Z</published>
    <updated>2024-06-02T02:54:08.974Z</updated>
    
    <content type="html"><![CDATA[<h1 id="比较器"><a href="#比较器" class="headerlink" title="比较器"></a>比较器</h1><p>比较器是一种组合逻辑电路，用于比较两个二进制数的大小。比较器可以分为相等比较器和不等比较器。以下是比较器的工作原理：</p><h3 id="1-相等比较器"><a href="#1-相等比较器" class="headerlink" title="1. 相等比较器"></a>1. 相等比较器</h3><p>相等比较器用于判断两个输入是否相等。一个简单的相等比较器可以使用异或（XOR）门来实现。</p><ul><li><p><strong>1位相等比较器</strong>：</p><ul><li>输入：A 和 B</li><li>输出：如果 A 和 B 相等，输出为1；否则为0。</li><li>实现方法：使用一个异或门。如果 A 和 B 相等，A XOR B 的输出为0。然后取反，可以得到相等比较器的输出。</li></ul></li><li><p><strong>多位相等比较器</strong>：</p><ul><li>输入：多个位的二进制数，例如 $A &#x3D; A_3A_2A_1A_0$ 和 $B &#x3D; B_3B_2B_1B_0$。</li><li>输出：如果所有对应位相等，输出为1；否则为0。</li><li>实现方法：将每个位对使用异或门比较，然后将所有异或门的输出输入到一个与（AND）门。如果所有位相等，异或门的输出都为0，与门的输出为1。</li></ul></li></ul><h3 id="2-不等比较器"><a href="#2-不等比较器" class="headerlink" title="2. 不等比较器"></a>2. 不等比较器</h3><p>不等比较器用于判断两个输入数的大小关系（大于、小于或等于）。通常使用逐位比较的方法。</p><ul><li><strong>多位不等比较器</strong>：<ul><li>输入：多个位的二进制数，例如 $A &#x3D; A_3A_2A_1A_0$ 和 $B &#x3D; B_3B_2B_1B_0$。</li><li>输出：A &gt; B、A &lt; B 或 A &#x3D; B。</li><li>实现方法：从最高位开始比较。如果最高位的比较结果不相等，则高位决定大小关系；如果相等，则继续比较下一位，直到找到不同位或者比较完所有位。</li></ul></li></ul><p>例如，74HC85 是一个常用的 4位不等比较器，其工作方式如下：</p><ol><li><p><strong>比较最高位</strong>：</p><ul><li>检查 $A_3$ 和 $B_3$：<ul><li>如果 $A_3 &gt; B_3$，则 A &gt; B。</li><li>如果 $A_3 &lt; B_3$，则 A &lt; B。</li><li>如果 $A_3 &#x3D; B_3$，继续比较下一位。</li></ul></li></ul></li><li><p><strong>逐位比较</strong>：</p><ul><li>重复上述过程，依次比较 $A_2$ 和 $B_2$、$A_1$ 和 $B_1$、$A_0$ 和 $B_0$。</li><li>如果所有位都相等，则 A &#x3D; B。</li></ul></li><li><p><strong>实现电路</strong>：</p><ul><li>使用级联的比较电路进行逐位比较。</li><li>74HC85 具有级联输入和输出，可以实现多位数的比较，通过连接多个74HC85实现更高位的比较。</li></ul></li></ol><h3 id="3-不等比较器的例子"><a href="#3-不等比较器的例子" class="headerlink" title="3. 不等比较器的例子"></a>3. 不等比较器的例子</h3><p>具体实现一个 4位不等比较器（如 74HC85）的电路逻辑：</p><ul><li>输入：A 和 B 的每个位 $A_3A_2A_1A_0$ 和 $B_3B_2B_1B_0$。</li><li>输出：A &gt; B、A &lt; B 和 A &#x3D; B。</li><li>逻辑：<ul><li>对于每一位，使用以下逻辑：<ul><li>$A_i &gt; B_i$：输出1，表示 A &gt; B。</li><li>$A_i &lt; B_i$：输出1，表示 A &lt; B。</li><li>如果 $A_i &#x3D; B_i$，则检查下一位。</li></ul></li></ul></li></ul><p>通过组合这些逻辑门，可以设计一个完整的比较器电路，用于判断两个二进制数的大小关系。这些比较器在数字电路中广泛用于排序、选择和控制逻辑中。</p><h1 id="解码器"><a href="#解码器" class="headerlink" title="解码器"></a>解码器</h1><p>解码器是一种组合逻辑电路，用于将编码的数据转换成指定的输出信号。它的工作原理是根据输入的二进制编码，激活唯一的输出线。以下是解码器的详细工作原理和示例：</p><h3 id="解码器的基本概念"><a href="#解码器的基本概念" class="headerlink" title="解码器的基本概念"></a>解码器的基本概念</h3><p>解码器接受 n 位二进制输入，并生成 2^n 个输出。每一个输出对应于输入的一个唯一的二进制组合。</p><h3 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h3><ol><li><p><strong>输入和输出关系</strong>：</p><ul><li>输入：n 位二进制数（例如 $A_{n-1}A_{n-2}…A_0$）。</li><li>输出：2^n 个输出线中的一个被激活（例如 $Y_0, Y_1, …, Y_{2^n-1}$）。</li><li>当输入的二进制数对应某一个输出时，该输出线被激活（输出1），其他输出线保持不激活（输出0）。</li></ul></li><li><p><strong>逻辑实现</strong>：</p><ul><li>解码器使用逻辑与门（AND gates）和非门（NOT gates）实现输入到输出的映射。</li><li>每一个输出对应于一个唯一的输入组合。</li><li>非门用于将输入的某些位取反，以实现正确的逻辑组合。</li></ul></li></ol><h3 id="示例：2位输入的4线解码器（2-to-4-Decoder）"><a href="#示例：2位输入的4线解码器（2-to-4-Decoder）" class="headerlink" title="示例：2位输入的4线解码器（2-to-4 Decoder）"></a>示例：2位输入的4线解码器（2-to-4 Decoder）</h3><p>假设有2位输入 $A_1$ 和 $A_0$，输出为 $Y_0, Y_1, Y_2, Y_3$。</p><table><thead><tr><th>$A_1$</th><th>$A_0$</th><th>$Y_0$</th><th>$Y_1$</th><th>$Y_2$</th><th>$Y_3$</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>1</td><td>0</td><td>0</td><td>0</td></tr><tr><td>0</td><td>1</td><td>0</td><td>1</td><td>0</td><td>0</td></tr><tr><td>1</td><td>0</td><td>0</td><td>0</td><td>1</td><td>0</td></tr><tr><td>1</td><td>1</td><td>0</td><td>0</td><td>0</td><td>1</td></tr></tbody></table><ul><li><strong>逻辑表达式</strong>：<ul><li>$Y_0 &#x3D; \overline{A_1} \cdot \overline{A_0}$</li><li>$Y_1 &#x3D; \overline{A_1} \cdot A_0$</li><li>$Y_2 &#x3D; A_1 \cdot \overline{A_0}$</li><li>$Y_3 &#x3D; A_1 \cdot A_0$</li></ul></li></ul><h3 id="4位输入的16线解码器（4-to-16-Decoder）"><a href="#4位输入的16线解码器（4-to-16-Decoder）" class="headerlink" title="4位输入的16线解码器（4-to-16 Decoder）"></a>4位输入的16线解码器（4-to-16 Decoder）</h3><p>假设有4位输入 $A_3, A_2, A_1, A_0$，输出为 $Y_0, Y_1, …, Y_{15}$。</p><ul><li><strong>逻辑表达式</strong>：<ul><li>$Y_0 &#x3D; \overline{A_3} \cdot \overline{A_2} \cdot \overline{A_1} \cdot \overline{A_0}$</li><li>$Y_1 &#x3D; \overline{A_3} \cdot \overline{A_2} \cdot \overline{A_1} \cdot A_0$</li><li>$Y_2 &#x3D; \overline{A_3} \cdot \overline{A_2} \cdot A_1 \cdot \overline{A_0}$</li><li>$…$</li><li>$Y_{15} &#x3D; A_3 \cdot A_2 \cdot A_1 \cdot A_0$</li></ul></li></ul><h3 id="特殊解码器"><a href="#特殊解码器" class="headerlink" title="特殊解码器"></a>特殊解码器</h3><ol><li><p><strong>BCD到7段显示解码器</strong>：</p><ul><li>将BCD码（Binary-Coded Decimal）转换为7段显示器的控制信号。</li><li>每个输出对应7段显示器的一个段（a-g）的点亮状态。</li></ul></li><li><p><strong>多级解码器</strong>：</p><ul><li>通过级联多个解码器实现更高位数的解码。例如，使用两个4-to-16解码器可以实现5位输入的解码。</li></ul></li></ol><h3 id="实际应用"><a href="#实际应用" class="headerlink" title="实际应用"></a>实际应用</h3><p>解码器在数字电路中有广泛的应用，包括：</p><ul><li>地址解码：在存储器中选择特定的存储单元。</li><li>数据选择：在多路复用器中选择特定的数据路径。</li><li>显示驱动：控制7段显示器或其他显示设备。</li></ul><h3 id="例子：74HC154-4线到16线解码器"><a href="#例子：74HC154-4线到16线解码器" class="headerlink" title="例子：74HC154 4线到16线解码器"></a>例子：74HC154 4线到16线解码器</h3><ul><li><strong>输入</strong>：4位输入 $A_3, A_2, A_1, A_0$。</li><li><strong>输出</strong>：16条输出线中的一条被激活。</li><li><strong>特点</strong>：具有使能输入（chip select），可以通过使能输入选择是否激活解码器。</li></ul><p>通过以上描述可以看出，解码器的核心工作原理是将输入的二进制编码转换成唯一的输出信号，这一过程主要依赖逻辑与门和非门的组合来实现。</p><h1 id="编码器"><a href="#编码器" class="headerlink" title="编码器"></a>编码器</h1><p>编码器是一种组合逻辑电路，用于将输入信号转换为二进制编码输出。与解码器的工作方式相反，编码器将多个输入信号中的一个高电平信号转换为相应的二进制编码。以下是编码器的工作原理及其应用。</p><h3 id="编码器的基本概念"><a href="#编码器的基本概念" class="headerlink" title="编码器的基本概念"></a>编码器的基本概念</h3><p>编码器接受 2^n 个输入信号，并生成 n 位二进制输出。每一个输出编码代表一个唯一的输入信号。</p><h3 id="工作原理-1"><a href="#工作原理-1" class="headerlink" title="工作原理"></a>工作原理</h3><ol><li><p><strong>输入和输出关系</strong>：</p><ul><li>输入：2^n 个信号线，其中只有一条信号线处于高电平（逻辑1）。</li><li>输出：n 位二进制数，对应于高电平输入信号的位置。</li></ul></li><li><p><strong>逻辑实现</strong>：</p><ul><li>编码器使用逻辑或门（OR gates）来实现输入到输出的映射。</li><li>每一个输出位由多个输入信号通过或门组合而成。</li></ul></li></ol><h3 id="示例：4-to-2-优先编码器（4-to-2-Priority-Encoder）"><a href="#示例：4-to-2-优先编码器（4-to-2-Priority-Encoder）" class="headerlink" title="示例：4-to-2 优先编码器（4-to-2 Priority Encoder）"></a>示例：4-to-2 优先编码器（4-to-2 Priority Encoder）</h3><p>假设有4个输入 $D_3, D_2, D_1, D_0$ 和2位输出 $A_1, A_0$。</p><table><thead><tr><th>输入 $D_3$</th><th>输入 $D_2$</th><th>输入 $D_1$</th><th>输入 $D_0$</th><th>输出 $A_1$</th><th>输出 $A_0$</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>0</td><td>1</td><td>0</td><td>0</td></tr><tr><td>0</td><td>0</td><td>1</td><td>0</td><td>0</td><td>1</td></tr><tr><td>0</td><td>1</td><td>0</td><td>0</td><td>1</td><td>0</td></tr><tr><td>1</td><td>0</td><td>0</td><td>0</td><td>1</td><td>1</td></tr></tbody></table><ul><li><strong>逻辑表达式</strong>：<ul><li>$A_1 &#x3D; D_3$ 或 $D_2$</li><li>$A_0 &#x3D; D_3$ 或 $D_1$</li></ul></li></ul><h3 id="优先编码器"><a href="#优先编码器" class="headerlink" title="优先编码器"></a>优先编码器</h3><p>优先编码器是一种特殊的编码器，它处理多个输入同时为高电平的情况，优先编码器选择具有最高优先级的输入进行编码。</p><p>例如，4-to-2 优先编码器的逻辑如下：</p><ul><li><strong>输入</strong>： $D_3, D_2, D_1, D_0$ （优先级从高到低）</li><li><strong>输出</strong>： $A_1, A_0$</li></ul><table><thead><tr><th>输入 $D_3$</th><th>输入 $D_2$</th><th>输入 $D_1$</th><th>输入 $D_0$</th><th>输出 $A_1$</th><th>输出 $A_0$</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>0</td><td>1</td><td>0</td><td>0</td></tr><tr><td>0</td><td>0</td><td>1</td><td>0</td><td>0</td><td>1</td></tr><tr><td>0</td><td>1</td><td>0</td><td>1</td><td>1</td><td>0</td></tr><tr><td>1</td><td>1</td><td>1</td><td>1</td><td>1</td><td>1</td></tr></tbody></table><ul><li><strong>逻辑表达式</strong>：<ul><li>$A_1 &#x3D; D_3$ 或 $(D_2 和 \overline{D_3})$</li><li>$A_0 &#x3D; D_3$ 或 $(D_1 和 \overline{D_3} 和 \overline{D_2})$</li></ul></li></ul><h3 id="示例：十进制到BCD编码器（Decimal-to-BCD-Encoder）"><a href="#示例：十进制到BCD编码器（Decimal-to-BCD-Encoder）" class="headerlink" title="示例：十进制到BCD编码器（Decimal-to-BCD Encoder）"></a>示例：十进制到BCD编码器（Decimal-to-BCD Encoder）</h3><p>假设有10个输入 $D_9, D_8, D_7, …, D_0$ 和4位BCD输出 $B_3, B_2, B_1, B_0$。</p><ul><li><strong>逻辑表达式</strong>：<ul><li>$B_3 &#x3D; D_8$ 或 $D_9$</li><li>$B_2 &#x3D; D_4$ 或 $D_5$ 或 $D_6$ 或 $D_7$</li><li>$B_1 &#x3D; D_2$ 或 $D_3$ 或 $D_6$ 或 $D_7$</li><li>$B_0 &#x3D; D_1$ 或 $D_3$ 或 $D_5$ 或 $D_7$ 或 $D_9$</li></ul></li></ul><h3 id="实际应用-1"><a href="#实际应用-1" class="headerlink" title="实际应用"></a>实际应用</h3><p>编码器在数字系统中有许多实际应用，包括：</p><ul><li><strong>键盘编码器</strong>：将按键输入转换为相应的二进制编码。</li><li><strong>地址编码器</strong>：将存储器地址转换为编码信号。</li><li><strong>传感器数据编码</strong>：将来自多个传感器的信号转换为二进制编码，用于进一步处理。</li></ul><h3 id="例子：74HC147-十进制到BCD优先编码器"><a href="#例子：74HC147-十进制到BCD优先编码器" class="headerlink" title="例子：74HC147 十进制到BCD优先编码器"></a>例子：74HC147 十进制到BCD优先编码器</h3><ul><li><strong>输入</strong>：10个输入 $D_9, D_8, …, D_0$，仅一个为高电平。</li><li><strong>输出</strong>：4位BCD码 $B_3, B_2, B_1, B_0$，表示高电平输入的位置。</li><li><strong>特点</strong>：优先编码功能，多个输入为高电平时，优先输出最高位的编码。</li></ul><p>通过以上描述可以看出，编码器的核心工作原理是将多个输入信号中的一个高电平信号转换为对应的二进制编码输出，这一过程主要依赖逻辑或门的组合来实现。</p><h1 id="多路复用器"><a href="#多路复用器" class="headerlink" title="多路复用器"></a>多路复用器</h1><p>多路复用器（Multiplexer，简称MUX）是一种组合逻辑电路，用于选择多个输入信号中的一个并将其传输到输出端。它通常被称为数据选择器，因为它根据控制信号（选择信号）来选择哪个输入信号通过到输出端。</p><h3 id="多路复用器的基本概念"><a href="#多路复用器的基本概念" class="headerlink" title="多路复用器的基本概念"></a>多路复用器的基本概念</h3><p>多路复用器具有多个数据输入端、若干个选择输入端和一个输出端。选择输入端决定了哪个数据输入端的信号被传输到输出端。</p><h3 id="工作原理-2"><a href="#工作原理-2" class="headerlink" title="工作原理"></a>工作原理</h3><ol><li><p><strong>输入和输出关系</strong>：</p><ul><li>输入：多个数据输入（例如 $D_0, D_1, D_2, …, D_{n-1}$）。</li><li>选择输入：决定选择哪个数据输入（例如 $S_0, S_1, …, S_m$，其中 $m &#x3D; \log_2(n)$）。</li><li>输出：单个输出（Y）。</li></ul></li><li><p><strong>选择逻辑</strong>：</p><ul><li>多路复用器使用选择输入信号来选择其中一个数据输入并将其连接到输出。</li><li>根据选择输入的二进制值，MUX的输出端连接到对应的输入端。</li></ul></li></ol><h3 id="示例：2-to-1-多路复用器"><a href="#示例：2-to-1-多路复用器" class="headerlink" title="示例：2-to-1 多路复用器"></a>示例：2-to-1 多路复用器</h3><p>假设有2个数据输入 $D_0$ 和 $D_1$，1个选择输入 $S$，和1个输出 $Y$。</p><ul><li><strong>逻辑表达式</strong>：<ul><li>$Y &#x3D; \overline{S} \cdot D_0 + S \cdot D_1$</li><li>当 $S &#x3D; 0$ 时，$Y &#x3D; D_0$。</li><li>当 $S &#x3D; 1$ 时，$Y &#x3D; D_1$。</li></ul></li></ul><h3 id="示例：4-to-1-多路复用器"><a href="#示例：4-to-1-多路复用器" class="headerlink" title="示例：4-to-1 多路复用器"></a>示例：4-to-1 多路复用器</h3><p>假设有4个数据输入 $D_0, D_1, D_2, D_3$，2个选择输入 $S_1$ 和 $S_0$，1个输出 $Y$。</p><table><thead><tr><th>选择输入 $S_1$</th><th>选择输入 $S_0$</th><th>输出 $Y$</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>$D_0$</td></tr><tr><td>0</td><td>1</td><td>$D_1$</td></tr><tr><td>1</td><td>0</td><td>$D_2$</td></tr><tr><td>1</td><td>1</td><td>$D_3$</td></tr></tbody></table><ul><li><strong>逻辑表达式</strong>：<ul><li>$Y &#x3D; \overline{S_1} \cdot \overline{S_0} \cdot D_0 + \overline{S_1} \cdot S_0 \cdot D_1 + S_1 \cdot \overline{S_0} \cdot D_2 + S_1 \cdot S_0 \cdot D_3$</li></ul></li></ul><h3 id="多路复用器的实际应用"><a href="#多路复用器的实际应用" class="headerlink" title="多路复用器的实际应用"></a>多路复用器的实际应用</h3><ol><li><p><strong>数据选择</strong>：</p><ul><li>多路复用器可以选择不同的数据源传输到处理器或其他电路中。</li></ul></li><li><p><strong>信号路由</strong>：</p><ul><li>在通信系统中，多路复用器可以用于信号的路由选择，将多个信号通过一个通道传输。</li></ul></li><li><p><strong>逻辑函数实现</strong>：</p><ul><li>多路复用器可以用于实现任意逻辑函数。例如，通过设置不同的选择输入，可以实现特定的逻辑组合。</li></ul></li></ol><h3 id="例子：74HC151-8-to-1-多路复用器"><a href="#例子：74HC151-8-to-1-多路复用器" class="headerlink" title="例子：74HC151 8-to-1 多路复用器"></a>例子：74HC151 8-to-1 多路复用器</h3><ul><li><strong>输入</strong>：8个数据输入 $D_0, D_1, …, D_7$，3个选择输入 $S_2, S_1, S_0$。</li><li><strong>输出</strong>：单个输出 $Y$。</li><li><strong>特点</strong>：74HC151 可以根据选择输入将一个数据输入传输到输出端，具有使能输入来控制多路复用器是否工作。</li></ul><h3 id="多路复用器的电路实现"><a href="#多路复用器的电路实现" class="headerlink" title="多路复用器的电路实现"></a>多路复用器的电路实现</h3><p>多路复用器通常使用与门（AND gates）、或门（OR gates）和非门（NOT gates）来实现。以下是4-to-1多路复用器的电路实现示例：</p><ul><li><strong>选择输入</strong>： $S_1$ 和 $S_0$</li><li><strong>数据输入</strong>： $D_0, D_1, D_2, D_3$</li><li><strong>输出</strong>： $Y$</li></ul><ol><li>使用两个选择输入 $S_1$ 和 $S_0$ 的组合生成选择控制信号。</li><li>将选择控制信号与数据输入通过与门相连接，生成部分选择信号。</li><li>将所有部分选择信号通过或门组合，生成最终输出信号。</li></ol><p>通过这种方式，多路复用器可以实现对多个数据输入的选择和输出控制。多路复用器在数字电路设计中有广泛的应用，尤其在需要选择和路由多个信号的场合。</p><h1 id="解多路复用器"><a href="#解多路复用器" class="headerlink" title="解多路复用器"></a>解多路复用器</h1><p>解多路复用器（Demultiplexer，简称Demux）是一种组合逻辑电路，用于将单一的输入信号分配到多个输出线中的一个。与多路复用器（Mux）相反，解多路复用器根据选择输入信号将数据输入传输到指定的输出端。</p><h3 id="解多路复用器的基本概念"><a href="#解多路复用器的基本概念" class="headerlink" title="解多路复用器的基本概念"></a>解多路复用器的基本概念</h3><p>解多路复用器接受一个数据输入、若干个选择输入，并生成多个输出。选择输入决定了哪个输出线被激活，并传输数据输入信号。</p><h3 id="工作原理-3"><a href="#工作原理-3" class="headerlink" title="工作原理"></a>工作原理</h3><ol><li><p><strong>输入和输出关系</strong>：</p><ul><li><strong>数据输入</strong>：单个输入信号（例如 $D$）。</li><li><strong>选择输入</strong>：决定数据输入信号被传输到哪个输出（例如 $S_0, S_1, …, S_m$，其中 $m &#x3D; \log_2(n)$）。</li><li><strong>输出</strong>：多个输出信号（例如 $Y_0, Y_1, …, Y_{n-1}$）。</li></ul></li><li><p><strong>选择逻辑</strong>：</p><ul><li>解多路复用器使用选择输入信号来选择其中一个输出并将数据输入信号连接到该输出。</li><li>根据选择输入的二进制值，Demux的输入端连接到对应的输出端。</li></ul></li></ol><h3 id="示例：1-to-4-解多路复用器"><a href="#示例：1-to-4-解多路复用器" class="headerlink" title="示例：1-to-4 解多路复用器"></a>示例：1-to-4 解多路复用器</h3><p>假设有1个数据输入 $D$，2个选择输入 $S_1, S_0$，和4个输出 $Y_0, Y_1, Y_2, Y_3$。</p><table><thead><tr><th>选择输入 $S_1$</th><th>选择输入 $S_0$</th><th>激活的输出</th><th>输出逻辑</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>$Y_0$</td><td>$Y_0 &#x3D; D$</td></tr><tr><td>0</td><td>1</td><td>$Y_1$</td><td>$Y_1 &#x3D; D$</td></tr><tr><td>1</td><td>0</td><td>$Y_2$</td><td>$Y_2 &#x3D; D$</td></tr><tr><td>1</td><td>1</td><td>$Y_3$</td><td>$Y_3 &#x3D; D$</td></tr></tbody></table><ul><li><strong>逻辑表达式</strong>：<ul><li>$Y_0 &#x3D; \overline{S_1} \cdot \overline{S_0} \cdot D$</li><li>$Y_1 &#x3D; \overline{S_1} \cdot S_0 \cdot D$</li><li>$Y_2 &#x3D; S_1 \cdot \overline{S_0} \cdot D$</li><li>$Y_3 &#x3D; S_1 \cdot S_0 \cdot D$</li></ul></li></ul><h3 id="解多路复用器的实际应用"><a href="#解多路复用器的实际应用" class="headerlink" title="解多路复用器的实际应用"></a>解多路复用器的实际应用</h3><ol><li><p><strong>数据分配</strong>：</p><ul><li>解多路复用器用于将单一的数据输入信号分配到多个输出设备或线路中。</li></ul></li><li><p><strong>信号路由</strong>：</p><ul><li>在通信系统中，解多路复用器用于信号的分配选择，将输入信号路由到特定的输出通道。</li></ul></li><li><p><strong>存储器地址解码</strong>：</p><ul><li>在存储器系统中，解多路复用器用于地址解码，将地址信号分配到相应的存储单元。</li></ul></li></ol><h3 id="例子：74HC139-双1-to-4-解多路复用器"><a href="#例子：74HC139-双1-to-4-解多路复用器" class="headerlink" title="例子：74HC139 双1-to-4 解多路复用器"></a>例子：74HC139 双1-to-4 解多路复用器</h3><ul><li><strong>输入</strong>：单个数据输入 $D$，两个选择输入 $S_1, S_0$。</li><li><strong>输出</strong>：四个输出 $Y_0, Y_1, Y_2, Y_3$。</li><li><strong>特点</strong>：74HC139 具有两个独立的1-to-4解多路复用器，可以分别控制两个数据输入的分配。</li></ul><h3 id="解多路复用器的电路实现"><a href="#解多路复用器的电路实现" class="headerlink" title="解多路复用器的电路实现"></a>解多路复用器的电路实现</h3><p>解多路复用器通常使用与门（AND gates）和非门（NOT gates）来实现。以下是1-to-4解多路复用器的电路实现示例：</p><ul><li><strong>选择输入</strong>： $S_1$ 和 $S_0$</li><li><strong>数据输入</strong>： $D$</li><li><strong>输出</strong>： $Y_0, Y_1, Y_2, Y_3$</li></ul><ol><li>使用两个选择输入 $S_1$ 和 $S_0$ 的组合生成选择控制信号。</li><li>将数据输入与选择控制信号通过与门相连接，生成部分选择信号。</li><li>将各个与门的输出连接到相应的输出线，实现数据输入的分配。</li></ol><p>通过这种方式，解多路复用器可以实现将单一输入信号分配到多个输出的功能，广泛应用于数字电路设计中。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;比较器&quot;&gt;&lt;a href=&quot;#比较器&quot; class=&quot;headerlink&quot; title=&quot;比较器&quot;&gt;&lt;/a&gt;比较器&lt;/h1&gt;&lt;p&gt;比较器是一种组合逻辑电路，用于比较两个二进制数的大小。比较器可以分为相等比较器和不等比较器。以下是比较器的工作原理：&lt;/p&gt;
&lt;h3</summary>
      
    
    
    
    <category term="大学生涯" scheme="http://example.com/categories/%E5%A4%A7%E5%AD%A6%E7%94%9F%E6%B6%AF/"/>
    
    
    <category term="学习" scheme="http://example.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="二进制" scheme="http://example.com/tags/%E4%BA%8C%E8%BF%9B%E5%88%B6/"/>
    
    <category term="EEE104" scheme="http://example.com/tags/EEE104/"/>
    
  </entry>
  
  <entry>
    <title>CPT102-Hash Table</title>
    <link href="http://example.com/2024/06/02/CPT102-Hash%20Table/"/>
    <id>http://example.com/2024/06/02/CPT102-Hash%20Table/</id>
    <published>2024-06-02T02:46:03.000Z</published>
    <updated>2024-06-02T02:52:17.214Z</updated>
    
    <content type="html"><![CDATA[<h1 id="处理冲突"><a href="#处理冲突" class="headerlink" title="处理冲突"></a>处理冲突</h1><p>处理散列表中的冲突主要有两种方法：开放寻址法（Open Addressing）和链地址法（Separate Chaining）。以下是这些方法的详细介绍：</p><h3 id="开放寻址法（Open-Addressing）"><a href="#开放寻址法（Open-Addressing）" class="headerlink" title="开放寻址法（Open Addressing）"></a>开放寻址法（Open Addressing）</h3><p>开放寻址法是在发生冲突时，通过某种探测技术在散列表中寻找下一个空闲位置来存储元素的方法。主要的探测技术包括：</p><ol><li><p><strong>线性探测（Linear Probing）</strong>：</p><ul><li>探测函数：$hash(k, i) &#x3D; (hash_1(k) + i) \mod N$ </li><li>其中 $hash_1(k)$ 是原始散列函数，$i$ 是探测次数。</li><li>线性探测通过在数组中线性地寻找下一个空闲位置。</li></ul></li><li><p><strong>二次探测（Quadratic Probing）</strong>：</p><ul><li>探测函数：$hash(k, i) &#x3D; (hash_1(k) + c_1 \cdot i + c_2 \cdot i^2) \mod N$</li><li>其中 $c_1$ 和 $c_2$ 是常数，$i$ 是探测次数。</li><li>二次探测通过二次函数增加探测点的间隔，以减少聚集现象。</li></ul></li><li><p><strong>双重散列（Double Hashing）</strong>：</p><ul><li>探测函数：$hash(k, i) &#x3D; (hash_1(k) + i \cdot hash_2(k)) \mod N$</li><li>其中 $hash_1(k)$ 和 $hash_2(k)$ 是两个不同的散列函数，$i$ 是探测次数。</li><li>双重散列通过使用第二个散列函数来改变探测序列，以避免聚集。</li></ul></li></ol><h3 id="链地址法（Separate-Chaining）"><a href="#链地址法（Separate-Chaining）" class="headerlink" title="链地址法（Separate Chaining）"></a>链地址法（Separate Chaining）</h3><p>链地址法是将每个数组位置（或称为“槽”）与一个链表（或其他数据结构）关联起来的方法。当发生冲突时，元素会被添加到相应的链表中。</p><ol><li><p><strong>每个数组槽存储一个链表</strong>：</p><ul><li>当插入一个新元素时，根据散列函数计算出其索引位置，然后将元素添加到该索引位置的链表中。</li><li>这种方法的优点是，即使多个元素映射到同一个索引，它们也可以通过链表存储，不会丢失。</li></ul></li><li><p><strong>删除操作</strong>：</p><ul><li>在链地址法中，删除元素相对简单，只需从对应的链表中移除即可。</li></ul></li><li><p><strong>优点</strong>：</p><ul><li>不会出现“表满”的情况，因为新元素总是可以添加到链表的末尾。</li><li>删除操作不会影响其他元素。</li></ul></li><li><p><strong>缺点</strong>：</p><ul><li>需要额外的内存空间来存储链表结构。</li><li>如果链表过长，查找效率会降低。</li></ul></li></ol><p>课件中还提到了当散列表满时的处理方法，即分配一个更大的散列表，并将所有元素从较小的散列表重新散列到较大的散列表中，然后删除旧表。这是一种动态调整散列表大小以减少冲突和提高性能的方法。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;处理冲突&quot;&gt;&lt;a href=&quot;#处理冲突&quot; class=&quot;headerlink&quot; title=&quot;处理冲突&quot;&gt;&lt;/a&gt;处理冲突&lt;/h1&gt;&lt;p&gt;处理散列表中的冲突主要有两种方法：开放寻址法（Open Addressing）和链地址法（Separate Chaining</summary>
      
    
    
    
    <category term="大学生涯" scheme="http://example.com/categories/%E5%A4%A7%E5%AD%A6%E7%94%9F%E6%B6%AF/"/>
    
    
    <category term="学习" scheme="http://example.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="CPT102" scheme="http://example.com/tags/CPT102/"/>
    
  </entry>
  
  <entry>
    <title>CPT102-图论</title>
    <link href="http://example.com/2024/05/31/CPT102-%E5%9B%BE%E8%AE%BA/"/>
    <id>http://example.com/2024/05/31/CPT102-%E5%9B%BE%E8%AE%BA/</id>
    <published>2024-05-31T02:24:38.000Z</published>
    <updated>2024-06-02T02:45:27.590Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一讲"><a href="#第一讲" class="headerlink" title="第一讲"></a>第一讲</h1><p>主要内容包括图论的基本定义、图的性质、路径、树、有向图及其应用，如网络流等。下面是对文档内容的中文分析和总结：</p><h3 id="基本定义"><a href="#基本定义" class="headerlink" title="基本定义"></a>基本定义</h3><ul><li><strong>图（Graph G）</strong>：由有限的顶点集合 $V(G)$ 和连接顶点对的有限边集合 $E(G)$ 组成。</li><li><strong>图的阶（Order）</strong>：图中顶点的数量，记作 $|V|$。</li></ul><h3 id="图的性质"><a href="#图的性质" class="headerlink" title="图的性质"></a>图的性质</h3><ul><li><strong>邻接（Adjacency）</strong>：如果两个顶点由边连接，则它们是邻接的。</li><li><strong>邻居（Neighbors）</strong>：邻接的顶点称为邻居。</li><li><strong>入边（Incident）</strong>：连接顶点的边称为入边。</li></ul><h3 id="特殊类型的图"><a href="#特殊类型的图" class="headerlink" title="特殊类型的图"></a>特殊类型的图</h3><ul><li><strong>多重边（Multiple Edges）</strong>：连接同一对顶点的两条或多条边。</li><li><strong>环（Loops）</strong>：连接顶点到它自己的边。</li><li><strong>简单图（Simple Graph）</strong>：不包含多重边或环的图。</li></ul><h3 id="应用示例"><a href="#应用示例" class="headerlink" title="应用示例"></a>应用示例</h3><ul><li><strong>旅行商问题（TSP）</strong>：找到覆盖所有城市的最小成本路径。</li><li><strong>路由问题</strong>：找到从洛杉矶到纽约的最小延迟路径。</li></ul><h3 id="加权图"><a href="#加权图" class="headerlink" title="加权图"></a>加权图</h3><ul><li><strong>权重（Weight）</strong>：分配给每条边的数值，可以表示距离、容量或成本。</li></ul><h3 id="有向图（Digraphs）"><a href="#有向图（Digraphs）" class="headerlink" title="有向图（Digraphs）"></a>有向图（Digraphs）</h3><ul><li><strong>有向图</strong>：图中的边有方向，用箭头（弧）表示。</li></ul><h3 id="度（Degree）"><a href="#度（Degree）" class="headerlink" title="度（Degree）"></a>度（Degree）</h3><ul><li><strong>顶点的度（Degree）</strong>：边与顶点 V 相联系的次数，记作 $d(V)$。</li><li><strong>度序列（Degree Sequence）</strong>：按非增序排列的顶点度数序列，必要时重复。</li></ul><h3 id="子图（Subgraphs）"><a href="#子图（Subgraphs）" class="headerlink" title="子图（Subgraphs）"></a>子图（Subgraphs）</h3><ul><li><strong>子图</strong>：顶点集和边集都是原图的子集的图。</li><li><strong>生成子图（Spanning Subgraph）</strong>：如果子图 H 覆盖了 G 的所有顶点，即 $V(H) &#x3D; V(G)$，则称为生成子图。</li></ul><h1 id="第二讲"><a href="#第二讲" class="headerlink" title="第二讲"></a>第二讲</h1><p>主要内容包括图的路径、连通图、图的邻接矩阵和关联矩阵。以下是对文档内容的中文分析和总结：</p><h3 id="路径、步道和回路"><a href="#路径、步道和回路" class="headerlink" title="路径、步道和回路"></a>路径、步道和回路</h3><ul><li><strong>步道（Walk）</strong>：是顶点和边序列的一种形式，表示从一个顶点到另一个顶点的移动。</li><li><strong>步道的长度</strong>：步道中边的数量。</li><li><strong>迹（Trail）</strong>：如果步道中的边都是不同的，则称为迹。</li><li><strong>路径（Path）</strong>：如果步道中的顶点也都是不同的，则称为路径。</li><li><strong>闭迹（Closed Walk）</strong>：起点和终点相同的步道。</li><li><strong>回路或循环（Cycle or Circuit）</strong>：闭迹中除了起点和终点相同外，其他顶点都不同的称为回路或循环。</li></ul><h3 id="连通图"><a href="#连通图" class="headerlink" title="连通图"></a>连通图</h3><ul><li><strong>连通图（Connected Graph）</strong>：图中任意两个顶点之间都存在路径。</li><li><strong>断开的图（Disconnected Graph）</strong>：由多个组成部分构成的图，每个部分内部可以是连通的，但部分之间没有路径连接。</li><li><strong>组成部分（Components）</strong>：断开的图中，每个内部连通的子图称为一个组成部分。</li></ul><h3 id="图的矩阵表示"><a href="#图的矩阵表示" class="headerlink" title="图的矩阵表示"></a>图的矩阵表示</h3><ul><li><strong>关联矩阵（Incidence Matrix）</strong>：顶点和边的关联矩阵，是一个 $|V| \times |E|$ 的矩阵，其中的元素表示顶点和边的关联次数。</li><li><img src="https://s3.bmp.ovh/imgs/2024/05/31/94670e372d2d7654.png"></li><li><strong>邻接矩阵（Adjacency Matrix）</strong>：顶点和顶点之间的邻接矩阵，是一个 $|V| \times |V|$ 的矩阵，其中的元素表示两个顶点之间边的数量。</li><li><img src="https://s3.bmp.ovh/imgs/2024/05/31/7a03bdbb37c917b3.png"></li></ul><h1 id="第三讲"><a href="#第三讲" class="headerlink" title="第三讲"></a>第三讲</h1><p>主要内容包括树和森林、生成树、最小生成树、贪婪算法确定最小生成树以及最短路径问题。以下是对文档内容的中文分析和总结：</p><h3 id="树和森林"><a href="#树和森林" class="headerlink" title="树和森林"></a>树和森林</h3><ul><li><strong>树（Tree）</strong>：是无环的连通图。</li><li><strong>森林（Forest）</strong>：是无环的图，可能连通也可能不连通。</li></ul><h3 id="树的性质"><a href="#树的性质" class="headerlink" title="树的性质"></a>树的性质</h3><ul><li>如果树 $T$ 至少有两个顶点，那么它具有以下性质：<ul><li>从树 $T$ 中的任意顶点 $V_i$ 到另一个顶点 $V_j$ 恰好有一条路径。</li><li>从树 $T$ 中移除任意一条边，会得到两个组成部分，每个部分都是一棵树。</li><li>边的数量 $|E|$ 等于顶点数量 $|V|$ 减去 1。</li></ul></li></ul><h3 id="生成树"><a href="#生成树" class="headerlink" title="生成树"></a>生成树</h3><ul><li><strong>生成树</strong>：是图 $G$ 的一个生成子图，即树 $T$ 与 $G$ 有相同的顶点集合。</li><li>如何绘制生成树：<ul><li>选择 $G$ 中的任意一个顶点作为初始部分树。</li><li>逐个添加边，使得每个新边将一个新顶点连接到部分树上。</li><li>停止条件：如果图中有 $n$ 个顶点，则生成树将有 $n$ 个顶点和 $n-1$ 条边。</li></ul></li></ul><h3 id="最小生成树"><a href="#最小生成树" class="headerlink" title="最小生成树"></a>最小生成树</h3><ul><li><strong>最小生成树</strong>：在所有生成树中，具有最小成本的生成树。</li><li>应用场景：<ul><li>城市规划：设计连接多个城市的最低成本道路布局。</li><li>通信领域：以太网桥接布局自动配置，避免数据包在同一网络段上发送两次，因此需要使用无环的最小生成树。</li></ul></li></ul><h3 id="贪婪算法确定最小生成树"><a href="#贪婪算法确定最小生成树" class="headerlink" title="贪婪算法确定最小生成树"></a>贪婪算法确定最小生成树</h3><ul><li><strong>贪婪算法</strong>：选择任意一个起始顶点形成初始部分树 $V_i$。</li><li>添加到新顶点形成新部分树的最便宜的边 $E_i$。</li><li>重复第二步，直到所有顶点都被包含在树中。</li></ul><h3 id="最短路径问题"><a href="#最短路径问题" class="headerlink" title="最短路径问题"></a>最短路径问题</h3><ul><li>图中的权重可以表示通信网络中的延迟或道路上的旅行时间。</li><li>实际问题：找到任意两个顶点之间的最短路径。</li><li>最短路径意味着最短延迟。</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>定义了树、森林和生成树。</li><li>展示了如何绘制生成树。</li><li>引入了最小生成树的概念。</li><li>提出了贪婪算法来确定最小生成树：先选择最短的边。</li><li>引入了最短路径问题：在加权图中找到任意两个顶点之间的最短路径。</li></ul><h1 id="第四讲"><a href="#第四讲" class="headerlink" title="第四讲"></a>第四讲</h1><p>主要介绍了一种用于确定加权图中两个顶点之间最短路径的算法——迪杰斯特拉最短路径算法（Dijkstra’s Shortest Path Algorithm, SPA）。以下是对文档内容的中文分析和总结：</p><h3 id="最短路径算法"><a href="#最短路径算法" class="headerlink" title="最短路径算法"></a>最短路径算法</h3><p>文档通过一个通信网络的例子，展示了如何使用加权图来表示网络，其中权重表示与每条边相关联的延迟。目标是找到从起点 $s$ 到终点 $t$ 的最小延迟路径。<br><img src="https://s3.bmp.ovh/imgs/2024/05/31/e06559ad7a1877e5.png"></p><h3 id="算法步骤"><a href="#算法步骤" class="headerlink" title="算法步骤"></a>算法步骤</h3><ol><li><strong>阶段 1</strong>：从起始顶点 $s$ 开始，将其作为第一阶段的参考顶点，给所有相邻顶点标记使用单条边的路径长度，其他顶点标记为一个非常大的数（大于图中所有权重之和）。</li><li><strong>阶段 2</strong>：选择未作为参考顶点的最小标签顶点作为第二阶段的参考顶点，这里是顶点 $a$。更新通过 $a$ 到达相邻顶点的路径长度。</li><li><strong>阶段 3</strong>：重复步骤，选择未作为参考顶点的最小标签顶点作为下一阶段的参考顶点，这里是顶点 $c$。更新通过 $c$ 到达相邻顶点的路径长度。</li><li><strong>阶段 4</strong>：继续这个过程，选择顶点 $e$ 作为第四阶段的参考顶点。</li><li><strong>阶段 5</strong>：选择顶点 $b$ 作为新的参考顶点，更新通过 $b$ 到达相邻顶点的路径长度。</li><li><strong>阶段 6</strong>：选择顶点 $d$ 作为新的参考顶点，更新通过 $d$ 到达剩余顶点的路径长度。</li><li><strong>阶段 7</strong>：剩余顶点 $t$ 获得最小标签，算法停止，因为这是从 $s$ 到 $t$ 的最短路径长度。</li></ol><h3 id="迪杰斯特拉最短路径算法（SPA）"><a href="#迪杰斯特拉最短路径算法（SPA）" class="headerlink" title="迪杰斯特拉最短路径算法（SPA）"></a>迪杰斯特拉最短路径算法（SPA）</h3><ul><li>从初始节点开始，为每个节点分配一个临时距离值：初始节点为 0，其他节点为无穷大。</li><li>将初始节点设置为当前节点，将所有其他节点标记为未访问，并创建一个名为“未访问集”的集合。</li><li>对于当前节点，考虑其所有未访问的邻居，并计算它们的临时距离。将新计算的临时距离与当前分配的值进行比较，并分配较小的一个。</li><li>完成当前节点所有邻居的考虑后，将其标记为已访问，并从未访问集中移除。已访问的节点将不再被检查。</li><li>如果目标节点已被标记为已访问，或未访问集中节点的最小临时距离为无穷大，则停止。算法完成。</li><li>否则，选择标记有最小临时距离的未访问节点，将其设置为新的“当前节点”，然后返回步骤 3。</li></ul><h3 id="算法的优越性"><a href="#算法的优越性" class="headerlink" title="算法的优越性"></a>算法的优越性</h3><h4 id="为什么-SPA-是最优的？：SPA-为什么能提供最短路径？"><a href="#为什么-SPA-是最优的？：SPA-为什么能提供最短路径？" class="headerlink" title="为什么 SPA 是最优的？：SPA 为什么能提供最短路径？"></a>为什么 SPA 是最优的？：SPA 为什么能提供最短路径？</h4><p>迪杰斯特拉最短路径算法（SPA）是最优的，因为它系统性地寻找从一个起点到所有其他顶点的最短路径。SPA 的核心思想是逐步确定从起点到图中所有顶点的最短路径，它保证一旦找到从起点到某个顶点的最短路径，这个路径长度就不会被后续的迭代改变。这是因为算法总是选择当前未访问顶点中距离最小的顶点作为下一步的“参考顶点”，并且只考虑通过这个顶点到达相邻顶点的路径，如果这个路径比已知的路径更短，则更新该路径长度。</p><p>SPA 能够提供最短路径的原因在于：</p><ol><li><strong>贪心选择</strong>：每次迭代中，它选择最小已知距离的顶点作为当前顶点，并假设这是到达该顶点的最短路径。</li><li><strong>松弛操作</strong>：对于每个邻居，算法执行松弛操作，如果通过当前顶点到达邻居的距离比已知的更短，则更新这个距离。</li><li><strong>最优子结构</strong>：SPA 利用了最短路径问题的最优子结构性质，即如果两个顶点之间的最短路径包含第三个顶点，则通过第三个顶点到达另外两个顶点的部分路径也必须是最短的。</li></ol><h4 id="SPA-的复杂度是什么？"><a href="#SPA-的复杂度是什么？" class="headerlink" title="SPA 的复杂度是什么？"></a>SPA 的复杂度是什么？</h4><p>SPA 的时间复杂度主要取决于它如何处理图中的顶点和边。在最基本的形式中，如果使用一个简单的数组来存储距离，并且对于每个顶点都遍历其所有邻居来执行松弛操作，其时间复杂度是 (O(|V|^2))，其中 (|V|) 是顶点的数量。但是，通过使用优先队列（例如二叉堆）来管理未访问的顶点，可以显著减少查找最小顶点的时间，从而将时间复杂度降低到 (O(|V|+|E|\log|V|))，其中 (|E|) 是边的数量。</p><h4 id="SPA-能否推广到相关的最短路径问题？"><a href="#SPA-能否推广到相关的最短路径问题？" class="headerlink" title="SPA 能否推广到相关的最短路径问题？"></a>SPA 能否推广到相关的最短路径问题？</h4><p>SPA 可以推广到一些相关的最短路径问题，但也有一些限制：</p><ol><li><strong>单源最短路径</strong>：SPA 最初设计用于解决单源最短路径问题，即从单一起点到所有其他顶点的最短路径。</li><li><strong>有向图</strong>：SPA 可以应用于有向图，只要图中的边权重非负。</li><li><strong>非负权重</strong>：SPA 要求所有边的权重非负，因为如果存在负权重的边，算法可能无法找到正确的最短路径。</li><li><strong>扩展到多源</strong>：通过多次运行 SPA 或使用其他算法（如 Floyd-Warshall 算法），可以扩展到多源最短路径问题。</li></ol><p>然而，如果图中存在负权重边，SPA 就不再适用，因为这种情况下需要考虑经过负权重边的路径可能会缩短总体路径长度，这时可以使用 Bellman-Ford 算法。此外，SPA 不适用于动态图中的最短路径问题，即图中的边权重可能会随时间变化。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;第一讲&quot;&gt;&lt;a href=&quot;#第一讲&quot; class=&quot;headerlink&quot; title=&quot;第一讲&quot;&gt;&lt;/a&gt;第一讲&lt;/h1&gt;&lt;p&gt;主要内容包括图论的基本定义、图的性质、路径、树、有向图及其应用，如网络流等。下面是对文档内容的中文分析和总结：&lt;/p&gt;
&lt;h3 id</summary>
      
    
    
    
    <category term="大学生涯" scheme="http://example.com/categories/%E5%A4%A7%E5%AD%A6%E7%94%9F%E6%B6%AF/"/>
    
    
    <category term="学习" scheme="http://example.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="CPT102" scheme="http://example.com/tags/CPT102/"/>
    
  </entry>
  
  <entry>
    <title>EEE104-Lecture 2</title>
    <link href="http://example.com/2024/05/28/EEE104-Lecture%202/"/>
    <id>http://example.com/2024/05/28/EEE104-Lecture%202/</id>
    <published>2024-05-28T07:20:34.000Z</published>
    <updated>2024-05-28T07:33:16.358Z</updated>
    
    <content type="html"><![CDATA[<p>注意⚠️：本专栏的顺序与上课顺序<strong>不一定完全一致</strong>！！！</p><h1 id="带符号数"><a href="#带符号数" class="headerlink" title="带符号数"></a>带符号数</h1><p>在计算机的世界中，<strong>所有数字</strong>都是以<strong>补码形式</strong>存在的！<br>只不过，正数的补码<strong>是它本身</strong>，而<strong>负数的补码</strong>，则需要将正数<strong>进行2的补</strong>。</p><h2 id="1的补"><a href="#1的补" class="headerlink" title="1的补"></a>1的补</h2><p><strong>定义:</strong> 对于一个n位的二进制数 A，它的1的补 A’ 是将 A 中的每个1变为0，每个0变为1得到的数。</p><p><strong>计算方法:</strong></p><ol><li>将 A 的所有位进行反转。</li><li>不考虑进位，得到 A’。</li></ol><p><strong>举例:</strong></p><ul><li>A &#x3D; 1010，则 A’ &#x3D; 0101。</li><li>A &#x3D; 1111，则 A’ &#x3D; 0000。</li></ul><h2 id="2的补"><a href="#2的补" class="headerlink" title="2的补"></a>2的补</h2><p><strong>定义:</strong> 对于一个n位的二进制数 A，它的2的补 A’’ 是将 A 的1的补 A’ 再加1得到的数。</p><p><strong>计算方法:</strong></p><ol><li>计算 A 的1的补 A’。</li><li>将 A’ 和1相加，得到 A’’。</li></ol><p><strong>举例:</strong></p><ul><li>A &#x3D; 1010，则 A’ &#x3D; 0101，A’’ &#x3D; 0101 + 1 &#x3D; 0110。</li><li>A &#x3D; 1111，则 A’ &#x3D; 0000，A’’ &#x3D; 0000 + 1 &#x3D; 0001。</li></ul><h2 id="1的补和2的补的性质"><a href="#1的补和2的补的性质" class="headerlink" title="1的补和2的补的性质"></a>1的补和2的补的性质</h2><ul><li>对于正数 A，A’ 和 A’’ 相等。</li><li>对于负数 A’，A’’ 等于 -A 的二进制表示。</li><li>A 和 A’’ 的所有位相加，进位为1。</li></ul><h2 id="一些例子"><a href="#一些例子" class="headerlink" title="一些例子"></a>一些例子</h2><p><img src="https://s3.bmp.ovh/imgs/2024/05/28/c5e3a3acde929a80.jpg"><br><img src="https://s3.bmp.ovh/imgs/2024/05/28/aeb4656d746b8cf5.jpg"><br><img src="https://s3.bmp.ovh/imgs/2024/05/28/9bb6c6b1acd0469a.jpg"></p><h2 id="带符号数的数学运算"><a href="#带符号数的数学运算" class="headerlink" title="带符号数的数学运算"></a>带符号数的数学运算</h2><h3 id="加法"><a href="#加法" class="headerlink" title="加法"></a>加法</h3><p>什么都不用管！直接加就行！最后舍弃进位即可！<br><img src="https://s3.bmp.ovh/imgs/2024/05/28/e1414e054b07a2da.jpg"></p><h4 id="位溢出"><a href="#位溢出" class="headerlink" title="位溢出"></a>位溢出</h4><p>一般题里不会出现。指的是相加后超出了8位能存载的值（-127～128）。</p><h3 id="减法"><a href="#减法" class="headerlink" title="减法"></a>减法</h3><p>将<strong>被减数</strong>取<strong>相反数</strong>后相加即可。<br><img src="https://s3.bmp.ovh/imgs/2024/05/28/61d340cec2805805.jpg"></p><h3 id="乘法"><a href="#乘法" class="headerlink" title="乘法"></a>乘法</h3><p>将数字与符号<strong>分开计算</strong>。如果<strong>有负数</strong>，将其变为<strong>正数</strong>后相乘。最后再根据<strong>负号的个数</strong>转换最后的结果。<br><img src="https://s3.bmp.ovh/imgs/2024/05/28/373de1ff46c58103.jpg"></p><h3 id="除法"><a href="#除法" class="headerlink" title="除法"></a>除法</h3><p>除法可化简为<strong>减法运算</strong>，归根结底为<strong>n次减去</strong>被除数，所得结果即<strong>为n</strong>。而减法又能化简为<strong>加法运算</strong>，所以只需要反复加上<strong>被除数的相反数</strong>，直至0为止。<br>也可以使用类似于十进制的<strong>竖式</strong>来做，但需要<strong>注意正负号</strong>。</p><h1 id="尾声"><a href="#尾声" class="headerlink" title="尾声"></a>尾声</h1><p>最基础的部分讲完啦，接下来就是<strong>逻辑门</strong>啦！之后的部分<strong>难度更大</strong>，属于数电最难的部分！<strong>加油冲冲冲！</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;注意⚠️：本专栏的顺序与上课顺序&lt;strong&gt;不一定完全一致&lt;/strong&gt;！！！&lt;/p&gt;
&lt;h1 id=&quot;带符号数&quot;&gt;&lt;a href=&quot;#带符号数&quot; class=&quot;headerlink&quot; title=&quot;带符号数&quot;&gt;&lt;/a&gt;带符号数&lt;/h1&gt;&lt;p&gt;在计算机的世界中，&lt;s</summary>
      
    
    
    
    <category term="大学生涯" scheme="http://example.com/categories/%E5%A4%A7%E5%AD%A6%E7%94%9F%E6%B6%AF/"/>
    
    
    <category term="学习" scheme="http://example.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="二进制" scheme="http://example.com/tags/%E4%BA%8C%E8%BF%9B%E5%88%B6/"/>
    
    <category term="EEE104" scheme="http://example.com/tags/EEE104/"/>
    
  </entry>
  
  <entry>
    <title>CPT103-Lecture 2</title>
    <link href="http://example.com/2024/03/15/CPT103-Lecture%202/"/>
    <id>http://example.com/2024/03/15/CPT103-Lecture%202/</id>
    <published>2024-03-15T13:25:23.000Z</published>
    <updated>2024-03-15T13:26:55.056Z</updated>
    
    <content type="html"><![CDATA[<p>上一篇文章我们讲了许多MySQL的数据操作语言，但是看起来还是挺混乱的，所以我想将他们归纳一下。</p><h1 id="数据定义语言"><a href="#数据定义语言" class="headerlink" title="数据定义语言"></a>数据定义语言</h1><h2 id="CREATE-DATABASE-语法"><a href="#CREATE-DATABASE-语法" class="headerlink" title="CREATE DATABASE 语法"></a>CREATE DATABASE 语法</h2><p>我们使用 <code>CREATE DATABASE</code> 语句来创建数据库。以下是 <code>CREATE DATABAS</code>E 语句的语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> &#123;DATABASE <span class="operator">|</span> SCHEMA&#125; [IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>] database_name</span><br></pre></td></tr></table></figure><p>其中：</p><ul><li><code>CREATE DATABASE</code> 和 <code>CREATE SCHEMA</code> 的是一样的。</li><li><code>CREATE DATABASE</code> 后指定要创建的数据库的名字。</li><li><code>IF NOT EXISTS</code> 表示在指定的数据库不存在的情况下才创建。它是可选的。</li></ul><h2 id="DROP-DATABASE-语法"><a href="#DROP-DATABASE-语法" class="headerlink" title="DROP DATABASE 语法"></a>DROP DATABASE 语法</h2><p>我们使用 <code>DROP DATABASE</code> 语句来删除数据库：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> &#123;DATABASE <span class="operator">|</span> SCHEMA&#125; [IF <span class="keyword">EXISTS</span>] database_name;</span><br></pre></td></tr></table></figure><p>其中需要说明的点与 <code>CREATE DATABASE</code> 语句相同。</p><h2 id="CREATE-TABLE-语法"><a href="#CREATE-TABLE-语法" class="headerlink" title="CREATE TABLE 语法"></a>CREATE TABLE 语法</h2><p>我们使用 <code>CREATE TABLE</code> 语句在数据库中创建一个新表。 <code>CREATE TABLE</code> 语句的语法如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> [IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>] table_name (</span><br><span class="line">   column_name data_type [<span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>] [<span class="keyword">DEFAULT</span> expr],</span><br><span class="line">   column_name data_type [<span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>] [<span class="keyword">DEFAULT</span> expr],</span><br><span class="line">   ...,</span><br><span class="line">   [table_constraints]</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>其中：</p><ul><li><code>CREATE TABLE</code> 语句创建一个给定名字 <strong>table_name</strong> 的表。<ul><li>表名可由字母、数字、下划线和美元符号组成，表名长度在 64 个字符以内。</li><li>表名在一个数据库中是唯一的。</li><li>新建的表会在当前默认的数据库中。如果还没有选择数据库，请使用 <code>db_name.table_name</code> 格式指定要新建的表所在的数据库。</li></ul></li><li><code>IF NOT EXISTS</code> 指示只有给定的表不存在的时候才进行创建。它是可选的。<ul><li>如果你给定一个已经存在的表名，又没有使用 <code>IF NOT EXISTS</code> 子句，服务器会返回一个错误。</li></ul></li><li><code>column_name data_type [NOT NULL | NULL] [DEFAULT expr] [AUTO_INCREMENT]</code> 定义了表中的一列。多个列使用逗号分隔。<ul><li><code>column_name</code> 是列的名字。列名可由字母、数字、下划线和美元符号组成，列名长度在 64 个字符以内。列名在一个表中是唯一的。</li><li><code>data_type</code> 是数据类型，可以是 <strong>CHAR, VARCHAR, INT, DATE, DATETIME, BIT, TEXT, ENUM, JSON, BOLB</strong> 等。</li><li><code>[NOT NULL | NULL]</code> 指示该列是否可以为 <code>NULL</code>。它是可选的。如果不指定该选项，则此列可以为 <code>NULL</code>。如果设置为 <code>NOT NULL</code>，则插入新行时该列必须有值。</li><li><code>[DEFAULT expr]</code> 指示该列的默认值。它是可选的。如果不指定该选项，则此列的默认是 NULL。</li><li><code>[AUTO_INCREMENT]</code> 指示该列是否是一个自增列。如果使用了此选项，则该列的值可有服务器自动产生和填充。该列的值从 1 开始，每增加一个行就会加 1。一个表中只能有一个自增列。</li></ul></li><li><code>[table_constraints]</code> 位于列定义之后，它定义了表的约束。它是可选的。表的约束有主键、外键、CHECK、UNIQUE 等。</li><li>当表名或者字段名中含有空格或者其他特殊字字符时，可使用 &#96;&#96;&#96; 包围起来。比如： <code>test 1</code>。（非标准语法）</li></ul><h2 id="DROP-TABLE-语句语法"><a href="#DROP-TABLE-语句语法" class="headerlink" title="DROP TABLE 语句语法"></a><strong>DROP TABLE</strong> 语句语法</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> [IF <span class="keyword">EXISTS</span>]</span><br><span class="line">  table_name [, table_name] ...</span><br></pre></td></tr></table></figure><p>说明：</p><ul><li><code>DROP TABLE </code>关键字后面是要删除的表名。如果要删除多个表，请使用逗号分隔表名。</li><li><code>IF EXISTS</code> 选项避免了删除不存在的表时发生的错误。它是可选的。<ul><li>当要删除的表中有不存在的表时：<ul><li>有 <code>IF EXISTS</code> 选项，不会对不存在的表报错。该语句会删除存在的表，并给出不存在的表的提示。</li><li>没有 <code>IF EXISTS</code> 选项，该语句运行失败带有一个指示不能移除不存在的表的错误。该语句不会删除任何表。</li></ul></li></ul></li><li><code>DROP TABLE</code> 删除表的定义和表中的数据，以及表上触发器。</li><li>你需要具有要删除的每一个表的 <code>DROP</code> 权限。</li></ul><h2 id="ALTER-TABLE-语法"><a href="#ALTER-TABLE-语法" class="headerlink" title="ALTER TABLE 语法"></a>ALTER TABLE 语法</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name</span><br><span class="line">  [alter_action options], ...</span><br></pre></td></tr></table></figure><p>其中 <code>alter_action</code> 是一个修改动作，包括：</p><ul><li><code>ADD</code> 关键字可用来添加列、索引、约束等，包括：<ul><li><code>ADD [COLUMN]</code>: 添加列</li><li><code>ADD INDEX</code>: 添加索引</li><li><code>ADD PRIMARY KEY</code>: 添加主键</li><li><code>ADD FOREIGN KEY</code>: 添加外键</li><li><code>ADD UNIQUE INDEX</code>: 添加唯一索引</li><li><code>ADD CHECK</code>: 添加检查约束</li></ul></li><li><code>DROP</code> 关键字可用来删除列、索引、约束等，包括：<ul><li><code>DROP [COLUMN] col_name</code>: 删除列</li><li><code>ADD INDEX index_name</code>: 删除索引</li><li><code>DROP PRIMARY KEY</code>: 删除主键</li><li><code>DROP FOREIGN KEY fk_symbol</code>: 删除外键</li><li><code>DROP CHECK symbol</code>: 删除检查约束</li></ul></li><li><code>MODIFY</code> 关键字用来修改列的定义。与 <code>CHANGE</code> 关键字不同，它不能重命名列。例如: <code>MODIFY [COLUMN] col_name column_definition</code>。</li><li><code>CHANGE</code> 关键字用来修改列的定义。与 <code>MODIFY</code> 关键字不同，它可以重命名列。例如: <code>CHANGE [COLUMN] old_col_name new_col_name column_definition</code>。</li><li><code>RENAM</code>E 关键字可以重命名列、索引和表。包括：<ul><li><code>RENAME COLUMN old_col_name TO new_col_name</code>: 重命名列。</li><li><code>RENAME INDEX old_index_name TO new_index_name</code>: 重命名索引。</li><li><code>RENAME new_tbl_name</code>: 重命名表。</li></ul></li></ul><h1 id="数据操作语言"><a href="#数据操作语言" class="headerlink" title="数据操作语言"></a>数据操作语言</h1><h2 id="MySQL-SELECT"><a href="#MySQL-SELECT" class="headerlink" title="MySQL SELECT"></a>MySQL SELECT</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> columns_list</span><br><span class="line"><span class="keyword">FROM</span> table_name;</span><br></pre></td></tr></table></figure><p>说明：</p><ul><li>关键字 <code>SELECT</code> 后跟着一个或多个数据表的列。</li><li><code>columns_list</code> 可以有多个列，他们之间需要用逗号 , 分隔。</li><li>当要检索数据表中的所有列的时候，使用 <code>SELECT * FROM table_name</code> 。</li><li>关键字 <code>FROM</code> 后跟着要从中检索数据的表名。</li><li>分号 ; 表示语句的结束，它是可选的。如果有两条或更多条语句，则需要使用分号 ; 将它们分开，以便 MySQL 单独执行每条语句。</li></ul><p><code>SELECT</code>是 <strong>MySQL</strong> 中用于<strong>读取数据</strong>的语言，相对来说挺<strong>重要</strong>的。</p><h2 id="MySQL-WHERE"><a href="#MySQL-WHERE" class="headerlink" title="MySQL WHERE"></a>MySQL <strong>WHERE</strong></h2><p><code>WHERE</code> 子句允许您为 <code>SELECT</code> 查询指定搜索条件。以下是 <code>WHERE</code> 子句的语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    columns_list</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    table_name</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    query_condition;</span><br></pre></td></tr></table></figure><p>其中 <code>query_condition</code> 就是查询条件，它的结果是一个布尔值，其值可能为 <strong>TRUE， FALSE 或 UNKNOWN</strong>。最终， <code>SELECT</code> 语句返回的结果集就是满足查询条件结果为 <strong>TRUE</strong> 的记录。<br>查询条件一般用来比较某个字段是否匹配某个值，一般形式为：<code>column_name = value</code><br>查询条件也可以是使用 <strong>AND , OR 和 NOT</strong> 逻辑运算符一个或多个表达式的组合。<br>除了用在 <code>SELECT</code> 语句之外， <code>WHERE</code> 子句还可以用在 <code>UPDATE</code> 和 <code>DELETE</code> 语句中，用来指定要更新或删除的行。</p><h2 id="MySQL-INSERT"><a href="#MySQL-INSERT" class="headerlink" title="MySQL INSERT"></a>MySQL INSERT</h2><p>我们可以使用一个 <code>INSERT</code> 语句插入一行或多行数据。基本插入语法为：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> table_name (column_1, column_2, ...)</span><br><span class="line"><span class="keyword">VALUES</span> (value_11, value_12, ...),</span><br><span class="line">       (value_21, value_22, ...),</span><br><span class="line">       ...;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>简单来说，就是使用<code>INSERT INTO</code>和<code>VALUES</code>关键字来插入数据。</li><li><code>INSERT INTO</code>后跟表名，而后是插入数据的列名列表。列名放在小括号中，多个列表使用逗号分隔。</li><li><code>VALUES</code>后跟需要存入的值，每个值列表使用小括号包围。值的数量要和字段的数量相同。值的位置和列的位置一一对应。</li><li>当插入多行数据时，需要在除最后一个值列表的小括号后用<code>,</code>分割，最后一个值列表后以<code>;</code>结尾。</li><li><code>INSERT</code>语句会返回输入的行数。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tablename <span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">12</span>, <span class="string">&#x27;小马&#x27;</span>),</span><br><span class="line">(<span class="number">18</span>, <span class="string">&#x27;企鹅&#x27;</span>)；</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tablename (column2, column1) <span class="keyword">VALUES</span></span><br><span class="line">(<span class="string">&#x27;小马&#x27;</span>, <span class="number">12</span>),</span><br><span class="line">(<span class="string">&#x27;企鹅&#x27;</span>, <span class="number">18</span>);</span><br></pre></td></tr></table></figure></li></ul><h3 id="插入日期字段"><a href="#插入日期字段" class="headerlink" title="插入日期字段"></a>插入日期字段</h3><p>上一篇中我们没有提到过关于日期字段的使用方式，所以来完善一下。<br>我们先创建一个新表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">user</span> (</span><br><span class="line">    id <span class="type">INT</span> AUTO_INCREMENT <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    name <span class="type">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    age <span class="type">INT</span>,</span><br><span class="line">    birthday <span class="type">DATE</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>其中的birthday即为日期字段的数据。我们可以使用 <strong>YYYY-MM-DD</strong> 格式的文本字符串来插入日期，其中：</p><ul><li><strong>YYYY</strong> 代表四位数年份，例如 <strong>2020</strong>。</li><li><strong>MM</strong> 代表两位数的月份，例如 <strong>01</strong>、<strong>02</strong> 和 <strong>12</strong>。</li><li><strong>DD</strong> 表示两位数的日期，例如 <strong>01</strong>、<strong>02</strong>、<strong>30</strong>、<strong>31</strong>。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">user</span> (name, age, birthday)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">&#x27;迟然&#x27;</span>, <span class="number">20</span>, <span class="string">&#x27;2004-07-16&#x27;</span>);</span><br></pre></td></tr></table></figure>我们可以使用<code>SELECT * FROM user;</code>这一 SQL 查询 <strong>user</strong> 表的数据，以验证是否成功插入：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">+----+--------+------+------------+</span><br><span class="line">| id | name   | age  | birthday   |</span><br><span class="line">+----+--------+------+------------+</span><br><span class="line">|  1 | 迟然   |   20 | 2004-07-16 |</span><br><span class="line">|  2 | 小白   |   21 | 2003-12-24 |</span><br><span class="line">+----+--------+------+------------+</span><br><span class="line">2 rows in set (0.01 sec)</span><br></pre></td></tr></table></figure>大家可以发现，我并没有传入<code>id</code>这一数据，但是程序会自动为传入的数据编号。这是因为我在创建 <strong>table <strong>的时候给</strong> id <strong>添加了<code>AUTO_INCREMENT</code>这一属性，我们叫它</strong>自增列</strong>。它会自动编号，并且每一次编号的比上一次大 <strong>1</strong> 。默认是从 <strong>1</strong> 开始增加，当然你也可以设置，就像这样：<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> <span class="keyword">user</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">user</span> (</span><br><span class="line">  id <span class="type">INT</span> AUTO_INCREMENT <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">  name <span class="type">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  age <span class="type">INT</span>,</span><br><span class="line">  birthday <span class="type">DATE</span></span><br><span class="line">)AUTO_INCREMENT <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">user</span> (name, age, birthday)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">&#x27;迟然&#x27;</span>, <span class="number">20</span>, <span class="string">&#x27;2004-07-16&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">user</span> (name, age, birthday)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">&#x27;小白&#x27;</span>, <span class="number">21</span>, <span class="string">&#x27;2003-12-24&#x27;</span>);</span><br></pre></td></tr></table></figure>我们使用了<code>AUTO_INCREMENT = 5</code>，如此一来，**id **就会从 <strong>5</strong> 开始增加。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">+----+--------+------+------------+</span><br><span class="line">| id | name   | age  | birthday   |</span><br><span class="line">+----+--------+------+------------+</span><br><span class="line">|  5 | 迟然   |   20 | 2004-07-16 |</span><br><span class="line">|  6 | 小白   |   21 | 2003-12-24 |</span><br><span class="line">+----+--------+------+------------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></li></ul><h2 id="MySQL-DELETE"><a href="#MySQL-DELETE" class="headerlink" title="MySQL DELETE"></a>MySQL DELETE</h2><p>使用<code>DELET</code>语句可以从该数据库表中删除记录行：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> table_name</span><br><span class="line">[<span class="keyword">WHERE</span> clause]</span><br><span class="line">[<span class="keyword">ORDER</span> <span class="keyword">BY</span> ...]</span><br><span class="line">[LIMIT row_count]</span><br></pre></td></tr></table></figure><p>其中：</p><ul><li><code>DELETE FROM</code> 后跟的是要从中删除数据的表。</li><li><code>WHERE</code> 子句用来过滤需要删除的行。满足条件的行会被删除。</li><li><code>WHERE</code> 子句是可选的。没有 <code>WHERE</code> 子句时，<code>DELETE</code> 语句将删除表中的所有行。</li><li><code>ORDER BY</code> 子句用来指定删除行的顺序。它是可选的。</li><li><code>LIMIT</code> 子句用来指定删除的最大行数。它是可选的。</li><li><code>DELETE</code> 语句返回删除的行数。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> tablename</span><br><span class="line"><span class="keyword">WHERE</span> column2 <span class="operator">=</span> <span class="string">&#x27;企鹅&#x27;</span>;</span><br></pre></td></tr></table></figure></li></ul><h2 id="MySQL-UPDATE"><a href="#MySQL-UPDATE" class="headerlink" title="MySQL UPDATE"></a>MySQL UPDATE</h2><p><code>UPDATE</code> 语句可以更新表中的一行或者多行数据，可以更新表中的一个或者多个字段（列）。 以下是 <code>UPDATE</code> 语句的基本语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> [IGNORE] table_name</span><br><span class="line"><span class="keyword">SET</span></span><br><span class="line">    column_name1 <span class="operator">=</span> value1,</span><br><span class="line">    column_name2 <span class="operator">=</span> value2,</span><br><span class="line">    ...</span><br><span class="line">[<span class="keyword">WHERE</span> clause];</span><br></pre></td></tr></table></figure><p>其中：</p><ul><li><code>UPDATE</code> 关键字后指定要更新数据的表名。</li><li>使用 <code>SET</code> 子句设置字段的新值。多个字段使用逗号分隔。字段的值可以是普通的字面值，也可以是表达式运算，还可以是子查询。</li><li>使用 <code>WHERE</code> 子句指定要更新的行。只有符合 <code>WHERE</code> 条件的行才会被更新。</li><li><code>WHERE</code> 子句是可选的。如果不指定 <code>WHERE</code> 子句，则更新表中的所有行。</li></ul><p><code>UPDATE</code> 语句中的 <code>WHERE</code> 子句非常重要。除非您特意，否则不要省略 <code>WHERE</code> 子句。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> tablename <span class="keyword">set</span> column1 <span class="operator">=</span> <span class="number">19</span></span><br><span class="line"><span class="keyword">WHERE</span> column2 <span class="operator">=</span> <span class="string">&#x27;小马&#x27;</span>;</span><br></pre></td></tr></table></figure><h1 id="添加约束"><a href="#添加约束" class="headerlink" title="添加约束"></a>添加约束</h1><p>我们可以在创建 <strong>Table</strong> 的时候添加约束。约束可以添加在<strong>列名称的下方</strong>，也可以当作<code>col-options</code>添加。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> name (</span><br><span class="line">    col<span class="operator">-</span>name datatype [col<span class="operator">-</span>options], </span><br><span class="line">    :</span><br><span class="line">    col<span class="operator">-</span>name datatype [col<span class="operator">-</span>options], </span><br><span class="line">    [<span class="keyword">constraint</span><span class="number">-1</span>],</span><br><span class="line">    :</span><br><span class="line">    [<span class="keyword">constraint</span><span class="number">-2</span>]</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>约束的基本语法是：<code>CONSTRAINT name TYPE details;</code><br>建议创建约束名称，以便以后可以通过引用其名称来删除约束。</p><ul><li>如果你不提供一个名称，系统会自动生成一个。</li></ul><p>MySQL 提供了以下约束类型：</p><ul><li><code>PRIMARY KEY</code></li><li><code>UNIQUE</code></li><li><code>FOREIGN KEY</code></li><li><code>CHECK</code></li><li><code>NOT NULL</code></li><li><code>INDEX</code></li></ul><h2 id="CHECK约束"><a href="#CHECK约束" class="headerlink" title="CHECK约束"></a>CHECK约束</h2><p>以<code>CHECK</code>约束为例：</p><ul><li><p>在创建表的时候在列定义中使用 CHECK 约束</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">user</span> (</span><br><span class="line">    id <span class="type">INT</span> AUTO_INCREMENT <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    age <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">CHECK</span>(age <span class="operator">&gt;</span> <span class="number">0</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li><li><p>在创建表的时候在表上定义 CHECK 约束</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">user</span> (</span><br><span class="line">    id <span class="type">INT</span> AUTO_INCREMENT <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    age <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    <span class="keyword">CONSTRAINT</span> <span class="keyword">CHECK</span>(age <span class="operator">&gt;</span> <span class="number">0</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li><li><p>使用修改表语句的为表添加 CHECK 约束</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">user</span></span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> <span class="keyword">CHECK</span>(age <span class="operator">&gt;</span> <span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>让我们来举个例子：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">user</span> (</span><br><span class="line">    id <span class="type">INT</span> AUTO_INCREMENT <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    name <span class="type">VARCHAR</span>(<span class="number">45</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    login_name <span class="type">VARCHAR</span>(<span class="number">45</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">CHECK</span>(length(login_name) <span class="operator">&gt;=</span> <span class="number">4</span>),</span><br><span class="line">    password <span class="type">VARCHAR</span>(<span class="number">45</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">CHECK</span>(length(password) <span class="operator">&gt;=</span> <span class="number">8</span>),</span><br><span class="line">    <span class="keyword">CONSTRAINT</span> <span class="keyword">CHECK</span>(login_name <span class="operator">&lt;&gt;</span> password)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>这里，在 <code>CREATE TABLE</code> 语句中有 3 个 <code>CHECK</code> 约束：</p></li><li><p>在 <code>login_name</code> 列定义中的 <code>CHECK(length(login_name) &gt;= 4)</code> 保证登录名的长度不小于 4。</p></li><li><p>在 <code>password</code> 列定义中的 <code>CHECK(length(password) &gt;= 8)</code> 保证登录名的长度不小于 8。</p></li><li><p>在表上的约束 <code>CONSTRAINT CHECK(login_name &lt;&gt; password)</code> 保证密码不能和登录名相同。</p></li></ul><p>我们可以使用<code>SHOW CREATE TABLE user</code>语句来查看表 **user **上的约束。</p><h2 id="UNIQUE约束"><a href="#UNIQUE约束" class="headerlink" title="UNIQUE约束"></a>UNIQUE约束</h2><p>在SQL中，<code>UNIQUE</code>约束是一种数据库表约束，它确保表中的特定列或列组合中的值是唯一的。这意味着对于任何两条不同的记录，这些列中的值都必须不同。<br><code>UNIQUE</code>约束与<code>PRIMARY KEY</code>约束类似，但两者之间也有一些关键的区别。</p><ul><li><strong>PRIMARY KEY约束</strong>是唯一性约束的一种特殊类型，它还标识了表中的每条记录。这意味着每个表只能有一个<code>PRIMARY KEY</code>约束，并且该约束不能包含任何<code>NULL</code>值。</li><li><strong>UNIQUE约束</strong>可以应用于表中的任何列或列组合，包括主键列。与<code>PRIMARY KEY</code>约束不同，<code>UNIQUE</code>约束可以包含<code>NULL</code>值。</li></ul><p><code>UNIQUE</code>约束可用于确保数据的完整性和准确性。例如，您可以使用<code>UNIQUE</code>约束来确保：</p><ul><li>每个客户都有唯一的客户ID。</li><li>每个产品都有唯一的库存号。</li><li>每个员工都有唯一的电子邮件地址。</li></ul><p>如果尝试插入违反UNIQUE约束的值，则会导致错误。</p><h2 id="添加外键"><a href="#添加外键" class="headerlink" title="添加外键"></a>添加外键</h2><h3 id="什么是外键"><a href="#什么是外键" class="headerlink" title="什么是外键"></a>什么是外键</h3><p>外键相对于主键而言，用来引用其他表。外键通过子表的一个或多个列对应到父表的主键或唯一键值，将子表的行和父表行建立起关联关系。<br>我们来定义一个外键：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CONSTRAINT</span> `fk_city_country` <span class="keyword">FOREIGN</span> KEY (`country_id`)</span><br><span class="line">    <span class="keyword">REFERENCES</span> `country` (`country_id`)</span><br><span class="line">    <span class="keyword">ON</span> <span class="keyword">DELETE</span> RESTRICT</span><br><span class="line">    <span class="keyword">ON</span> <span class="keyword">UPDATE</span> CASCADE</span><br></pre></td></tr></table></figure><p>其中：</p><ul><li>位于 <code>CONSTRAINT</code> 关键字之后的 <code>fk_city_country</code> 是外键的名字。它是可选的。</li><li>位于 <code>FOREIGN KEY</code> 关键字之后的是作为外键的列名。</li><li>位于 <code>REFERENCES</code> 关键字之后的是被引用的表和列。</li><li><code>ON DELETE</code> 和 <code>ON UPDATE</code> 指定了删除或更新被引用的表中的数据时要采取的约束策略。你可以使用以下 3 个策略中的一个：<ul><li><code>CASCADE</code>：如果被引用的表中的一行被删除或更新，该表中匹配行的值会自动删除或更新。</li><li><code>SET NULL</code>：如果被引用的表中的一行被删除或更新，该表中匹配行的值设置为 NULL。</li><li><code>RESTRICT</code>: 如果被引用的表中的一行在该表中有匹配的行，试图删除或更新被引用的表中行时会引发 MySQL 错误。这是默认的策略。</li></ul></li></ul><p>通常，<strong>外键所属的表</strong>被称作<strong>子表</strong>，<strong>被外键引用的表</strong>被称作<strong>父表</strong>。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;上一篇文章我们讲了许多MySQL的数据操作语言，但是看起来还是挺混乱的，所以我想将他们归纳一下。&lt;/p&gt;
&lt;h1 id=&quot;数据定义语言&quot;&gt;&lt;a href=&quot;#数据定义语言&quot; class=&quot;headerlink&quot; title=&quot;数据定义语言&quot;&gt;&lt;/a&gt;数据定义语言&lt;/h1&gt;&lt;</summary>
      
    
    
    
    <category term="大学生涯" scheme="http://example.com/categories/%E5%A4%A7%E5%AD%A6%E7%94%9F%E6%B6%AF/"/>
    
    
    <category term="学习" scheme="http://example.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="MySQL" scheme="http://example.com/tags/MySQL/"/>
    
    <category term="CPT103" scheme="http://example.com/tags/CPT103/"/>
    
  </entry>
  
  <entry>
    <title>INT104-Tutorial 2</title>
    <link href="http://example.com/2024/03/15/INT104-Tutorial%202/"/>
    <id>http://example.com/2024/03/15/INT104-Tutorial%202/</id>
    <published>2024-03-14T17:20:26.000Z</published>
    <updated>2024-03-14T17:22:56.953Z</updated>
    
    <content type="html"><![CDATA[<p>想了想还是先写Tutorial的吧，这门课Lecture已经讲到起飞了，根本听不懂啊。而TTL这边则负责打基础，总共花三节课给Python讲完是吧。</p><h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><h2 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h2><p>这是基础中的基础了，python的算术运算符和java相类似，最基础的就是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="number">4</span> + <span class="number">3</span>) <span class="comment"># 7</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">4</span> - <span class="number">3</span>) <span class="comment"># 1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">4</span> * <span class="number">3</span>) <span class="comment"># 12</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">7</span> / <span class="number">2</span>) <span class="comment"># 3.5</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">7</span> // <span class="number">2</span>) <span class="comment"># 3</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">int</span>(<span class="number">7</span> / <span class="number">2</span>)) <span class="comment"># 3</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">7</span> % <span class="number">2</span>) <span class="comment"># 1</span></span><br></pre></td></tr></table></figure><p>首先，”+”, “-“, “*”这三个没什么可讲了，所以我们来讲讲这个除法。众所周知，python的变量是不需要定义类型的，程序会自动识别输入的数据并分配合适的类型（真的很方便！）。所以当我们输入”&#x2F;“时，python会自动将结果识别为<code>float</code>类型。如果想要输出不带小数点的，我们可以使用”&#x2F;&#x2F;“这个整除符号。当然，我们也可以将其强转为<code>int</code>类型。最后一个”%”是取余（当然和java中的一样），简单的说就是把7除以2后余下的数取出来，所以叫做取余。<br>在python中，指数运算也被算作了算术运算符，其符号为”**”。在java中，我们需要使用<code>Math.pow()</code>来进行指数运算，但是在python中，我们只需要<code>7 ** 2 = 49</code>即可，是不是很方便！<br>所有算数运算符的运算顺序与数学中相一致，并且也可以使用<code>()</code>来提高运算的优先级。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="number">16</span> ** <span class="number">2</span> / <span class="number">4</span>) <span class="comment"># 64.0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">4</span> + <span class="number">3</span> ** <span class="number">2</span>) <span class="comment"># 13</span></span><br><span class="line"><span class="built_in">print</span>((<span class="number">4</span> + <span class="number">3</span>) ** <span class="number">2</span>) <span class="comment"># 49</span></span><br></pre></td></tr></table></figure><h2 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h2><p>比较运算符与java中相一致，就不过多赘述了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">1</span></span><br><span class="line">y = <span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(x == y) <span class="comment"># False</span></span><br><span class="line"><span class="built_in">print</span>(x != y) <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(x &lt; y) <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(x &gt; y) <span class="comment"># False</span></span><br><span class="line"><span class="built_in">print</span>(x &lt;= y) <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(x &gt;= y) <span class="comment"># False</span></span><br></pre></td></tr></table></figure><p>要注意，<code>=</code>为赋值运算符，而<code>==</code>为比较运算符，两者不一致！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">5</span></span><br><span class="line">x == <span class="number">5</span> <span class="comment"># True</span></span><br></pre></td></tr></table></figure><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><p>同样，也与java中相一致。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="literal">False</span></span><br><span class="line">b = <span class="literal">True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="keyword">not</span> a) <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="keyword">not</span> b) <span class="comment"># False</span></span><br><span class="line"><span class="built_in">print</span>(a <span class="keyword">or</span> b) <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(a <span class="keyword">and</span> b) <span class="comment"># False</span></span><br><span class="line"></span><br><span class="line">x = <span class="number">14</span></span><br><span class="line">(x &gt; <span class="number">10</span>) <span class="keyword">and</span> (x &lt; <span class="number">20</span>) <span class="comment"># True</span></span><br><span class="line"></span><br><span class="line">y = <span class="number">42</span></span><br><span class="line"><span class="keyword">not</span> ((x % <span class="number">2</span> == <span class="number">0</span>) <span class="keyword">and</span> (y % <span class="number">3</span> == <span class="number">0</span>)) <span class="comment"># False</span></span><br><span class="line"></span><br><span class="line">xDivisible = (x % <span class="number">2</span>) == <span class="number">0</span> <span class="comment"># 检查x是否是2的倍数</span></span><br><span class="line">yDivisible = (y % <span class="number">3</span>) == <span class="number">0</span> <span class="comment"># 检查y是否是3的倍数</span></span><br><span class="line"><span class="keyword">not</span> (xDivisible <span class="keyword">and</span> yDivisible) <span class="comment"># False</span></span><br></pre></td></tr></table></figure><h1 id="If-Else关键字"><a href="#If-Else关键字" class="headerlink" title="If Else关键字"></a>If Else关键字</h1><p>功能与java相同，只是语法不同。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="literal">True</span></span><br><span class="line"><span class="keyword">if</span> x:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Executing if&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Executing else&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Prints regardless of the if-else block&quot;</span>)</span><br><span class="line"><span class="comment"># Out: Executing if</span></span><br><span class="line"><span class="comment"># Out: Prints regardless of the if-else block</span></span><br></pre></td></tr></table></figure><p>使用比较运算符<code>==</code>也是可以的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">&quot;阿斌&quot;</span></span><br><span class="line"><span class="keyword">if</span> name == <span class="string">&quot;阿斌&quot;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;给斌神🧎了&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;👋&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;你好呀&quot;</span>)</span><br><span class="line"><span class="comment"># Out: 给斌神🧎了</span></span><br><span class="line"><span class="comment"># Out: 你好呀</span></span><br></pre></td></tr></table></figure><p>在python中，我们使用<code>elif</code>而不是<code>else if</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">20</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> age &lt; <span class="number">18</span>:</span><br><span class="line">    <span class="built_in">type</span> = <span class="string">&quot;🍚&quot;</span></span><br><span class="line"><span class="keyword">elif</span> age == <span class="number">18</span>:</span><br><span class="line">    <span class="built_in">type</span> = <span class="string">&quot;🐟&quot;</span></span><br><span class="line"><span class="keyword">elif</span> age &lt; <span class="number">28</span>:</span><br><span class="line">    <span class="built_in">type</span> = <span class="string">&quot;🐧&quot;</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">type</span> = <span class="string">&quot;🐴&quot;</span></span><br><span class="line">    </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;你是&quot;</span> + <span class="built_in">type</span>) <span class="comment"># 你是🐧</span></span><br></pre></td></tr></table></figure><h1 id="Loop"><a href="#Loop" class="headerlink" title="Loop"></a>Loop</h1><h2 id="For-loop"><a href="#For-loop" class="headerlink" title="For loop"></a>For loop</h2><p>python的for循环是一种迭代控制流语句，可以用于遍历序列（如字符串、列表、元组、字典、集合）中的每个元素，或者执行指定次数的循环。其使用方式类似于java中的增强for循环：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Serendipity = [<span class="string">&quot;🍚&quot;</span>, <span class="string">&quot;🐟&quot;</span>, <span class="string">&quot;🐧&quot;</span>, <span class="string">&quot;🐴&quot;</span>, <span class="string">&quot;🆘&quot;</span>, <span class="string">&quot;☀️&quot;</span>, <span class="string">&quot;🥣&quot;</span>]</span><br><span class="line"><span class="keyword">for</span> bro <span class="keyword">in</span> Serendipity:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Bro&quot;</span>, bro, <span class="string">&quot;has index&quot;</span>, Serendipity.index(bro))</span><br><span class="line"><span class="comment"># Out: Bro 🍚 has index 0</span></span><br><span class="line"><span class="comment"># Out: Bro 🐟 has index 1</span></span><br><span class="line"><span class="comment"># Out: Bro 🐧 has index 2</span></span><br><span class="line"><span class="comment"># Out: Bro 🐴 has index 3</span></span><br><span class="line"><span class="comment"># Out: Bro 🆘 has index 4</span></span><br><span class="line"><span class="comment"># Out: Bro ☀️ has index 5</span></span><br><span class="line"><span class="comment"># Out: Bro 🥣 has index 6</span></span><br></pre></td></tr></table></figure><p>如果我们想达到类似java中普通for循环的效果，可以使用<code>for i in range(1, 10)</code>的形式。其中，<code>range</code>中的前者是起始，后者是终止。也可以使用单数字形式，表示从 1 至所填数字（不包含），如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">85</span>):</span><br><span class="line">    <span class="keyword">if</span> num == <span class="number">1</span>:</span><br><span class="line">        <span class="built_in">print</span>(num)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;你出生了&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> num == <span class="number">18</span>:</span><br><span class="line">        <span class="built_in">print</span>(num)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;你成年了&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> num == <span class="number">30</span>:</span><br><span class="line">        <span class="built_in">print</span>(num)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;三十而立&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> num == <span class="number">40</span>:</span><br><span class="line">        <span class="built_in">print</span>(num)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;四十不惑&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> num == <span class="number">50</span>:</span><br><span class="line">        <span class="built_in">print</span>(num)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;五十知天命&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> num == <span class="number">60</span>:</span><br><span class="line">        <span class="built_in">print</span>(num)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;六十耳顺&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> num == <span class="number">70</span>:</span><br><span class="line">        <span class="built_in">print</span>(num)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;从心所欲，不逾矩&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> num &gt;= <span class="number">80</span>:</span><br><span class="line">        <span class="built_in">print</span>(num)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;古来稀&quot;</span>)</span><br><span class="line"><span class="comment"># Out: 1</span></span><br><span class="line"><span class="comment"># Out: 你出生了</span></span><br><span class="line"><span class="comment"># Out: 18</span></span><br><span class="line"><span class="comment"># Out: 你成年了</span></span><br><span class="line"><span class="comment"># Out: 30</span></span><br><span class="line"><span class="comment"># Out: 三十而立</span></span><br><span class="line"><span class="comment"># Out: 40</span></span><br><span class="line"><span class="comment"># Out: 四十不惑</span></span><br><span class="line"><span class="comment"># Out: 50</span></span><br><span class="line"><span class="comment"># Out: 五十知天命</span></span><br><span class="line"><span class="comment"># Out: 60</span></span><br><span class="line"><span class="comment"># Out: 六十耳顺</span></span><br><span class="line"><span class="comment"># Out: 70</span></span><br><span class="line"><span class="comment"># Out: 从心所欲，不逾矩</span></span><br><span class="line"><span class="comment"># Out: 80</span></span><br><span class="line"><span class="comment"># Out: 古来稀</span></span><br><span class="line"><span class="comment"># Out: 81</span></span><br><span class="line"><span class="comment"># Out: 古来稀</span></span><br><span class="line"><span class="comment"># Out: 82</span></span><br><span class="line"><span class="comment"># Out: 古来稀</span></span><br><span class="line"><span class="comment"># Out: 83</span></span><br><span class="line"><span class="comment"># Out: 古来稀</span></span><br><span class="line"><span class="comment"># Out: 84</span></span><br><span class="line"><span class="comment"># Out: 古来稀</span></span><br></pre></td></tr></table></figure><h2 id="While-loop"><a href="#While-loop" class="headerlink" title="While loop"></a>While loop</h2><p>while循环与java中相一致：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Executing while loop&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">5</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    n = n + <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Finished while loop&quot;</span>)</span><br><span class="line"><span class="comment"># Out: Executing while loop</span></span><br><span class="line"><span class="comment"># Out: Executing while loop</span></span><br><span class="line"><span class="comment"># Out: Executing while loop</span></span><br><span class="line"><span class="comment"># Out: Executing while loop</span></span><br><span class="line"><span class="comment"># Out: Executing while loop</span></span><br><span class="line"><span class="comment"># Out: Executing while loop</span></span><br><span class="line"><span class="comment"># Out: Finished while loop</span></span><br></pre></td></tr></table></figure><h1 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h1><p>python真不愧是最简单的语言，只需要使用<code>def</code>即可创建函数。不用管是否有返回值，或是返回值的类型是什么。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">greet_user</span>(<span class="params">username</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Hello,&quot;</span>, username + <span class="string">&quot;!&quot;</span>)</span><br><span class="line">greet_user(<span class="string">&quot;🍚&quot;</span>)</span><br><span class="line">greet_user(<span class="string">&quot;🐧&quot;</span>)</span><br><span class="line">greet_user(<span class="string">&quot;🐟&quot;</span>)</span><br><span class="line"><span class="comment"># Out: Hello, 🍚!</span></span><br><span class="line"><span class="comment"># Out: Hello, 🐧!</span></span><br><span class="line"><span class="comment"># Out: Hello, 🐟!</span></span><br></pre></td></tr></table></figure><p>除此之外，我们还可以给传入数据定义默认参数。当未传入参数时，python会自动使用默认参数来替代：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">describe_pet</span>(<span class="params">name, animal = <span class="string">&quot;dog&quot;</span></span>): <span class="comment"># animal的默认参数：dog</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;I have a&quot;</span>, animal + <span class="string">&quot;.&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Its name is&quot;</span>, name + <span class="string">&quot;.&quot;</span>)</span><br><span class="line">describe_pet(<span class="string">&quot;阿斌&quot;</span>, <span class="string">&quot;penguin&quot;</span>)</span><br><span class="line">describe_pet(<span class="string">&quot;🍚&quot;</span>)</span><br><span class="line">describe_pet(animal = <span class="string">&quot;horse&quot;</span>, name = <span class="string">&quot;🐴&quot;</span>) <span class="comment"># 顺序也可以是无所谓的</span></span><br><span class="line"><span class="comment"># Out: I have a penguin.</span></span><br><span class="line"><span class="comment"># Out: Its name is 阿斌.</span></span><br><span class="line"><span class="comment"># Out: I have a dog.</span></span><br><span class="line"><span class="comment"># Out: Its name is 🍚.</span></span><br><span class="line"><span class="comment"># Out: I have a horse.</span></span><br><span class="line"><span class="comment"># Out: Its name is 🐴.</span></span><br></pre></td></tr></table></figure><p>并且，我们还可以讲默认参数设置为<code>None</code>。配合if语句，可以实现当未传入该参数时不输出的效果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">describe_pet</span>(<span class="params">name, animal = <span class="literal">None</span></span>): <span class="comment"># 默认参数为None</span></span><br><span class="line">    <span class="keyword">if</span> animal:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;I have a&quot;</span>, animal + <span class="string">&quot;.&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Its name is&quot;</span>, name + <span class="string">&quot;.&quot;</span>)</span><br><span class="line">describe_pet(<span class="string">&quot;阿斌&quot;</span>, <span class="string">&quot;penguin&quot;</span>)</span><br><span class="line">describe_pet(<span class="string">&quot;🍚&quot;</span>)</span><br><span class="line">describe_pet(animal = <span class="string">&quot;horse&quot;</span>, name = <span class="string">&quot;🐴&quot;</span>) <span class="comment"># 顺序无所谓</span></span><br><span class="line"><span class="comment"># Out: I have a penguin.</span></span><br><span class="line"><span class="comment"># Out: Its name is 阿斌.</span></span><br><span class="line"><span class="comment"># Out: Its name is 🍚.</span></span><br><span class="line"><span class="comment"># Out: I have a horse.</span></span><br><span class="line"><span class="comment"># Out: Its name is 🐴.</span></span><br></pre></td></tr></table></figure><p>在定义的函数中使用If-Else关键字：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">roundNum</span>(<span class="params">num</span>):</span><br><span class="line">    remainder = num % <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> remainder &lt; <span class="number">0.5</span>:</span><br><span class="line">        <span class="keyword">return</span> num - remainder</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> num + (<span class="number">1</span> - remainder)</span><br><span class="line"><span class="built_in">print</span>(roundNum(<span class="number">3.4</span>))</span><br><span class="line"><span class="built_in">print</span>(roundNum(<span class="number">7.7</span>))</span><br><span class="line"><span class="built_in">print</span>(roundNum(<span class="number">9.2</span>))</span><br><span class="line"><span class="comment"># Out: 3.0</span></span><br><span class="line"><span class="comment"># Out: 8.0</span></span><br><span class="line"><span class="comment"># Out: 9.0</span></span><br></pre></td></tr></table></figure><p>传入的数据可以时列表，当返回多个数据时，也是以列表形式返回：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">listFunc</span>(<span class="params">my_list</span>):</span><br><span class="line">    maximum = <span class="built_in">max</span>(my_list)</span><br><span class="line">    minimum = <span class="built_in">min</span>(my_list)</span><br><span class="line">    first = my_list[<span class="number">0</span>]</span><br><span class="line">    last = my_list[-<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">return</span> maximum,minimum,first,last</span><br><span class="line"></span><br><span class="line">l=[<span class="number">24</span>, <span class="number">12</span>, <span class="number">68</span>, <span class="number">40</span>, <span class="number">120</span>, <span class="number">96</span>]</span><br><span class="line">params = listFunc(l)</span><br><span class="line"><span class="built_in">print</span>(params)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Max value is&quot;</span>, params[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Min value is&quot;</span>, params[<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;First value is&quot;</span>, params[<span class="number">2</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Last value is&quot;</span>, params[<span class="number">3</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># Out: (120, 12, 24, 96)</span></span><br><span class="line"><span class="comment"># Out: Max value is 120</span></span><br><span class="line"><span class="comment"># Out: Min value is 12</span></span><br><span class="line"><span class="comment"># Out: First value is 24</span></span><br><span class="line"><span class="comment"># Out: Last value is 96</span></span><br></pre></td></tr></table></figure><h1 id="多种输出方式"><a href="#多种输出方式" class="headerlink" title="多种输出方式"></a>多种输出方式</h1><p>python支持很多种将字符串与数字连接的输出方式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">pi = <span class="number">3.14159</span></span><br><span class="line">d = <span class="number">12756</span></span><br><span class="line">c = pi * d</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Earth&#x27;s diameter at equator: &quot;</span> + <span class="built_in">str</span>(d) + <span class="string">&quot; km. Equator&#x27;s circumference: &quot;</span> + <span class="built_in">str</span>(c) + <span class="string">&quot; km.&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Earth&#x27;s diameter at equator:&quot;</span>, d, <span class="string">&quot;km. Equator&#x27;s circumference:&quot;</span>, c, <span class="string">&quot;km.&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Earth&#x27;s diameter at equator: &#123;:.1f&#125; km. Equator&#x27;s circumference: &#123;:.1f&#125; km.&quot;</span>.<span class="built_in">format</span>(d,c))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Earth&#x27;s diameter at equator: <span class="subst">&#123;d&#125;</span> km. Equator&#x27;s circumference: <span class="subst">&#123;c&#125;</span> km.&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Out: Earth&#x27;s diameter at equator: 12756 km. Equator&#x27;s circumference: 40074.12204 km.</span></span><br><span class="line"><span class="comment"># Out: Earth&#x27;s diameter at equator: 12756 km. Equator&#x27;s circumference: 40074.12204 km.</span></span><br><span class="line"><span class="comment"># Out: Earth&#x27;s diameter at equator: 12756.0 km. Equator&#x27;s circumference: 40074.1 km.</span></span><br><span class="line"><span class="comment"># Out: Earth&#x27;s diameter at equator: 12756 km. Equator&#x27;s circumference: 40074.12204 km.</span></span><br></pre></td></tr></table></figure><p>使用”+”号时，需要把数字强转为字符串形式。<br>使用”, “时，可以直接连接字符串与数字，并且会自动补充空格。<br>后面两个都是format() 方法格式化输出，我们最常使用的是第四种这样的格式。对于第三种的<code>&#123;:.1f&#125;</code>：</p><ul><li><code>:</code>：表示要对值进行格式化。</li><li><code>.</code>：表示小数点。</li><li><code>1</code>：表示保留小数点后一位数字。</li><li><code>f</code>：表示使用浮点数格式。</li></ul><p>所以完整来看，<code>&#123;:.1f&#125;</code>表示保留小数点后一位数字的浮点数格式。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;想了想还是先写Tutorial的吧，这门课Lecture已经讲到起飞了，根本听不懂啊。而TTL这边则负责打基础，总共花三节课给Python讲完是吧。&lt;/p&gt;
&lt;h1 id=&quot;运算符&quot;&gt;&lt;a href=&quot;#运算符&quot; class=&quot;headerlink&quot; title=&quot;运算符&quot;</summary>
      
    
    
    
    <category term="大学生涯" scheme="http://example.com/categories/%E5%A4%A7%E5%AD%A6%E7%94%9F%E6%B6%AF/"/>
    
    
    <category term="学习" scheme="http://example.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="INT104" scheme="http://example.com/tags/INT104/"/>
    
  </entry>
  
  <entry>
    <title>EEE104-Lecture 1</title>
    <link href="http://example.com/2024/03/08/EEE104-Lecture%201/"/>
    <id>http://example.com/2024/03/08/EEE104-Lecture%201/</id>
    <published>2024-03-07T16:06:45.000Z</published>
    <updated>2024-03-07T16:25:53.648Z</updated>
    
    <content type="html"><![CDATA[<p>注意⚠️：本专栏的顺序与上课顺序<strong>不一定完全一致</strong>！！！</p><h1 id="二进制数"><a href="#二进制数" class="headerlink" title="二进制数"></a>二进制数</h1><h2 id="什么是二进制？"><a href="#什么是二进制？" class="headerlink" title="什么是二进制？"></a>什么是二进制？</h2><ul><li>二进制是一种<strong>以2为基数</strong>的记数系统，也就是说，它<strong>只使用0和1两个数字</strong>来表示所有数。二进制数的每一位称为一个比特（bit）。</li><li>二进制的进位规则是“<strong>逢二进一</strong>”，即每一位上的数字如果满2，则进一位，并将该位清零。就像我们常用的十进制一样，每一位上的数字如果满10，就往前进一位，并且该位清零。例如，二进制数1111，其十进制表示为15。</li><li>在计算机科学中，二进制有着广泛的应用。计算机中的所有数据都以二进制形式存储，包括文本、图像、声音等，并且运算都是基于二进制进行的。网络中的数据传输也都是以二进制形式进行的。</li></ul><h2 id="二进制的小数"><a href="#二进制的小数" class="headerlink" title="二进制的小数"></a>二进制的小数</h2><p>二进制也有<strong>小数</strong>。在小数点左侧，从第0位开始，每个位的<strong>权重</strong>分别表示2^0^, 2^1^, 2^2^…2^n-1^。而右侧则为2^-1^, 2^-2, 2^-3…2^-n^。</p><h2 id="二进制到十进制转换"><a href="#二进制到十进制转换" class="headerlink" title="二进制到十进制转换"></a>二进制到十进制转换</h2><p>我们将每个位的权重都表示出来，将所有将所有为 1 的位的权重<strong>相加</strong>即可得到对应的十进制数。<img src="https://ooo.0x0.ooo/2024/03/08/OyYa3B.png" alt="img1.png"></p><h2 id="十进制到二进制转换"><a href="#十进制到二进制转换" class="headerlink" title="十进制到二进制转换"></a>十进制到二进制转换</h2><p>这一转换更加简单，我们使用整数的<strong>重复除2法</strong>：</p><ol><li>将数字除以 2。</li><li>将上一次得到的结果再除以 2，直到产生零商。</li><li>除法产生的余数形成二进制数。</li><li>第一个余数是<strong>最低有效位(LSB)<strong>。<br><img src="https://ooo.0x0.ooo/2024/03/08/OyY5tK.png"><br>对于小数，我们</strong>将除2改为乘2</strong>:</li><li>将数字乘以 2。</li><li>重复将乘积的小数部分乘以 2，直到小数部分的乘积为零或达到所需的小数位数。</li><li>由乘法产生的进位形成二进制数。</li><li>第一次进位是**最高有效位(MSB)**。<br><img src="https://ooo.0x0.ooo/2024/03/08/OyYB2a.png"></li></ol><h2 id="二进制算数"><a href="#二进制算数" class="headerlink" title="二进制算数"></a>二进制算数</h2><p>对于二进制算数，我觉得并没有什么可以说的。因为这完全可以<strong>类比为十进制</strong>的加减乘除。<strong>唯一的区别</strong>就是二进制的上限是二，十进制的上限是十。所以二进制也是可以使用<strong>竖式运算</strong>的。<br>二进制<strong>加法</strong>：<img src="https://ooo.0x0.ooo/2024/03/08/OyYUWS.png"><br>二进制<strong>减法</strong>：<img src="https://ooo.0x0.ooo/2024/03/08/OyYbsC.png"><br>二进制<strong>乘法</strong>：<img src="https://ooo.0x0.ooo/2024/03/08/OyYWgN.png"><br>二进制<strong>除法</strong>：<img src="https://ooo.0x0.ooo/2024/03/08/OyVIy6.png"></p><h1 id="二进制的变换方式"><a href="#二进制的变换方式" class="headerlink" title="二进制的变换方式"></a>二进制的变换方式</h1><p>二进制拥有两种变换方式，我们称它为”<strong>1的补</strong>“和”<strong>2的补</strong>“。（这会在下一节中重点讲述）</p><h2 id="1的补"><a href="#1的补" class="headerlink" title="1的补"></a>1的补</h2><p>将二进制数中的所有 1 都换成 0，所有 0 都换成 1。</p><h2 id="2的补"><a href="#2的补" class="headerlink" title="2的补"></a>2的补</h2><p>将 1 的补加 1。这对于负数的表示很重要。<br><img src="https://ooo.0x0.ooo/2024/03/08/OyV6RI.png"></p><h1 id="十六进制数字"><a href="#十六进制数字" class="headerlink" title="十六进制数字"></a>十六进制数字</h1><p>是的，除了二进制和十进制，我们还有<strong>十六进制</strong>。<br>十六进制数字系统有 16 位数字，包括10 个数字(0-9)和 6 个字母字符(A-F)。每个数字代表一个 4 位的二进制数。十六进制数可以下标 16，也可以后面跟着一个“h”。<br>以下是十六进制的表格：<img src="https://ooo.0x0.ooo/2024/03/08/OyVuWF.png"><br>到达F后，我们需要<strong>进一位</strong>。在16进制的表示是：10, 11, 12…1E, 1F，在二进制的表示是：0001 0000, 0001 0001, 00010010…0001 1110, 0001 1111。<br><img src="https://ooo.0x0.ooo/2024/03/08/OyV2h1.png"></p><h2 id="十六进制到二进制的转换"><a href="#十六进制到二进制的转换" class="headerlink" title="十六进制到二进制的转换"></a>十六进制到二进制的转换</h2><p>从上面我们可以知道，1  个十六进制字符就是 4 个二进制字符。所以我们只需要将每个十六进制符号替换为相应的 4 位。并且最左边的 0 是可以删除的。</p><h2 id="十六进制到十进制的转换"><a href="#十六进制到十进制的转换" class="headerlink" title="十六进制到十进制的转换"></a>十六进制到十进制的转换</h2><p>类似于<strong>二进制转十进制</strong>，使用权重与每一位上的数相乘后想加。<strong>但是首先</strong>我们需要把十六进制每一位上的数换成<strong>十进制</strong>，并且权重从右到左分别是16^0^, 16^1^, 16^2^……<br>我们以十六进制的“B2F8”为例子，来进行一次转换：<br><img src="https://ooo.0x0.ooo/2024/03/08/OyV8jD.png"></p><h2 id="十进制到十六进制的转换"><a href="#十进制到十六进制的转换" class="headerlink" title="十进制到十六进制的转换"></a>十进制到十六进制的转换</h2><p>类似于十进制转二进制，使用<strong>重复除 16 法</strong>即可，就不过多赘述了。<br><img src="https://ooo.0x0.ooo/2024/03/08/OyV3sP.png"></p><h2 id="十六进制加法"><a href="#十六进制加法" class="headerlink" title="十六进制加法"></a>十六进制加法</h2><p>前面的十进制与十六进制的换算其实<strong>都是为了这一部分</strong>做准备。因为十六进制同时存在数字和字母，所以不能直接进行加法运算，而是<strong>需要先转化为十进制</strong>，而后再转回去。<br>并且我们需要遵循以下原则：</p><ul><li>如果两个数字的和小于 16，可以<strong>直接转为</strong>对应的十六进制数字。</li><li>如果这两个数字的和大于或等于 16，则<strong>需要减去 16</strong>，并在<strong>前一列加 1</strong>。（类似于进位）<br><img src="https://ooo.0x0.ooo/2024/03/08/OyYMel.png"></li></ul><h1 id="二进制编码十进制"><a href="#二进制编码十进制" class="headerlink" title="二进制编码十进制"></a>二进制编码十进制</h1><ul><li>二进制编码十进制（Binary Coded Decimal, BCD），是一种用二进制代码表示十进制数字的简单方法。</li><li>BCD 系统<strong>只有 10 个代码组</strong>。</li><li>它主要用于用户界面，如键盘和数字显示器。</li><li><strong>8421</strong> 码是一种 BCD，其中四个比特的权重分别为 8, 4, 2和1。<br><img src="https://ooo.0x0.ooo/2024/03/08/OyVwob.png"><br>其实说白了，就是用<strong>二进制来表示十六进制</strong>。需要注意的是，每一个数字都由一个四位的二进制组来表示，<strong>一定不要</strong>和二进制表示十进制搞混了！<br>这一部分的转换就是对着表查或者是背下来，四个四个为一组就行。</li></ul><h2 id="BCD的加法"><a href="#BCD的加法" class="headerlink" title="BCD的加法"></a>BCD的加法</h2><ul><li>我们可以直接使用<strong>二进制加法规则</strong>将两个 BCD 数相加。</li><li>如果一个 4 位组的十六进制小于 10，那么它就是一个有效的 BCD 数。（因为十六进制大于 9 的情况下是字母）</li><li>如果一个 4 位组的十六进制大于或等于 10，或者产生了溢出的位（也就是向第五位进了1），则结果无效。需要在此 4 位组上加 6（0110）来跳过 6 个无效状态（6个字母）。<br>正常的情况：<img src="https://ooo.0x0.ooo/2024/03/08/OyYOGg.png"><br>需要+6的情况：<img src="https://ooo.0x0.ooo/2024/03/08/OyYqhs.png"></li></ul><h1 id="尾声"><a href="#尾声" class="headerlink" title="尾声"></a>尾声</h1><p>这个部分的内容<strong>十分基础</strong>，但是大家一定要<strong>理解透彻</strong>！！！这些基本都是<strong>概念类</strong>的内容，和PPT上的内容挺类似的，我这里做了整理归纳和汉化。在下一节我会讲一些进阶的拓展内容，包括我自己的一些认识。特别感谢<strong>阿斌</strong>和<strong>小🐴</strong>的支持！！！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;注意⚠️：本专栏的顺序与上课顺序&lt;strong&gt;不一定完全一致&lt;/strong&gt;！！！&lt;/p&gt;
&lt;h1 id=&quot;二进制数&quot;&gt;&lt;a href=&quot;#二进制数&quot; class=&quot;headerlink&quot; title=&quot;二进制数&quot;&gt;&lt;/a&gt;二进制数&lt;/h1&gt;&lt;h2 id=&quot;什么是二进制</summary>
      
    
    
    
    <category term="大学生涯" scheme="http://example.com/categories/%E5%A4%A7%E5%AD%A6%E7%94%9F%E6%B6%AF/"/>
    
    
    <category term="学习" scheme="http://example.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="二进制" scheme="http://example.com/tags/%E4%BA%8C%E8%BF%9B%E5%88%B6/"/>
    
    <category term="EEE104" scheme="http://example.com/tags/EEE104/"/>
    
  </entry>
  
  <entry>
    <title>CPT102-Lecture 1</title>
    <link href="http://example.com/2024/03/08/CPT102-Lecture%200/"/>
    <id>http://example.com/2024/03/08/CPT102-Lecture%200/</id>
    <published>2024-03-07T16:06:32.000Z</published>
    <updated>2024-03-07T16:21:20.720Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CPT102是讲什么的？"><a href="#CPT102是讲什么的？" class="headerlink" title="CPT102是讲什么的？"></a>CPT102是讲什么的？</h1><p>想要学好这门课程，首先要知道这门课到底是学什么的。<br>PPT上是这么写的：</p><ul><li>更多关于组织、访问、管理数据和操作它们的算法的基础知识</li><li>触及设计和构建程序的基础</li><li>收集数据的程序<ul><li>不同类型的数据</li><li>不同类型的集合</li><li>用于实现集合的数据结构</li><li>处理集合的算法</li></ul></li><li>具有访问、控制、i&#x2F;o 等算法的程序</li><li>分析程序、算法和数据结构(效率、正确性)</li></ul><p>很复杂是不是？感觉在看天书，根本看不懂啊。<br>让我来总结一下吧！这门课是关于数据结构的，它将教你如何用计算机的方式组织和管理数据。其内容包括：</p><ul><li>基础知识：什么是数据结构，以及它们的不同类型。</li><li>数组：一维和多维数组的使用方法。</li><li>列表：链表的各种形式 (单向链表、双向链表等)  以及它们的应用。</li><li>栈、队列和堆： 这些数据结构的特性及其用法。</li><li>树： 学习树的基本概念， 常见树的种类 (二叉搜索树、AVL 树等) 以及遍历方法。</li><li>排序： 讲授各种排序算法 (选择排序、归并排序、快速排序等) 的原理和比较。</li><li>集合： 集合的抽象数据类型以及一些集合操作 (查找、并集、交集等) 的实现。</li><li>映射 (字典)： 学习映射的用法以及哈希表等实现方法。</li><li>选择合适的数据结构： 基于不同的需求选择最合适的数据结构。</li></ul><p>内容相对来说还是比较多的。但是你别急，我们有一个学期的时间来慢慢学习。让我们共同学习，无限进步！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;CPT102是讲什么的？&quot;&gt;&lt;a href=&quot;#CPT102是讲什么的？&quot; class=&quot;headerlink&quot; title=&quot;CPT102是讲什么的？&quot;&gt;&lt;/a&gt;CPT102是讲什么的？&lt;/h1&gt;&lt;p&gt;想要学好这门课程，首先要知道这门课到底是学什么的。&lt;br&gt;P</summary>
      
    
    
    
    <category term="大学生涯" scheme="http://example.com/categories/%E5%A4%A7%E5%AD%A6%E7%94%9F%E6%B6%AF/"/>
    
    
    <category term="学习" scheme="http://example.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="CPT102" scheme="http://example.com/tags/CPT102/"/>
    
  </entry>
  
  <entry>
    <title>CPT103-Lecture 1</title>
    <link href="http://example.com/2024/03/05/CPT103-Lecture%201/"/>
    <id>http://example.com/2024/03/05/CPT103-Lecture%201/</id>
    <published>2024-03-05T14:05:56.000Z</published>
    <updated>2024-03-12T03:47:30.757Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是数据库？"><a href="#什么是数据库？" class="headerlink" title="什么是数据库？"></a>什么是数据库？</h1><p>数据库是<strong>以一定方式</strong>存储<strong>大量数据</strong>的<strong>集合</strong>。其中的数据通常是<strong>有组织</strong>的，并可以<strong>共享</strong>和<strong>重复使用</strong>，通常使用<strong>数据库管理系统 (DBMS)</strong> 来管理。<br>数据库的类型有很多，包括：</p><ul><li><strong>关系数据库</strong>：这是最常见类型的数据库。关系数据库中的数据存储在表中。</li><li><strong>NoSQL 数据库</strong>：NoSQL 数据库是为非关系数据设计的。NoSQL 数据库通常比关系数据库更灵活和可扩展。</li><li><strong>云数据库</strong>：云数据库是托管在云中的数据库。云数据库可以提供灵活性和可扩展性。</li></ul><p>以下是一些常见的数据库示例：</p><ul><li><strong>MySQL</strong>：MySQL 是一种流行的关系数据库。</li><li><strong>PostgreSQL</strong>：PostgreSQL 是一种流行的关系数据库。</li><li><strong>MongoDB</strong>：MongoDB 是一种流行的 NoSQL 数据库。</li><li><strong>Amazon</strong> <strong>Relational</strong> <strong>Database</strong> <strong>Service (RDS)：</strong>RDS 是 Amazon Web Services (AWS) 提供的云数据库服务。</li></ul><p>CPT103中，我们需要学习<strong>关系数据库</strong>，并使用<strong>MySQL</strong>完成课程要求。</p><h2 id="关系数据库"><a href="#关系数据库" class="headerlink" title="关系数据库"></a>关系数据库</h2><p>关系数据库<strong>建立在关系模型的基础上</strong>，<strong>使用表格来组织数据</strong>。每个表都包含<strong>行</strong>和<strong>列</strong>。行代表数据中的<strong>记录</strong>，列代表记录的<strong>属性</strong>。不同的表之间可以通过<strong>外键</strong>来<strong>相互关联</strong>。（外键是表中的一列，它引用另一个表中的<strong>主键</strong>。）<br>想象一个学校，它需要存储学生、课程和成绩等信息。</p><p>我们可以使用关系数据库来存储这些信息。<br><strong>学生表</strong></p><table><thead><tr><th>学生ID</th><th>学生姓名</th><th>性别</th><th>出生日期</th></tr></thead><tbody><tr><td>1</td><td>张三</td><td>男</td><td>2000-01-01</td></tr><tr><td>2</td><td>李四</td><td>女</td><td>2001-02-02</td></tr><tr><td>3</td><td>王五</td><td>男</td><td>2002-03-03</td></tr></tbody></table><p><strong>课程表</strong></p><table><thead><tr><th>课程ID</th><th>课程名称</th><th>老师</th></tr></thead><tbody><tr><td>1</td><td>数学</td><td>王老师</td></tr><tr><td>2</td><td>语文</td><td>李老师</td></tr><tr><td>3</td><td>英语</td><td>张老师</td></tr></tbody></table><p><strong>成绩表</strong></p><table><thead><tr><th>学生ID</th><th>课程ID</th><th>成绩</th></tr></thead><tbody><tr><td>1</td><td>1</td><td>90</td></tr><tr><td>1</td><td>2</td><td>80</td></tr><tr><td>1</td><td>3</td><td>70</td></tr><tr><td>2</td><td>1</td><td>85</td></tr><tr><td>2</td><td>2</td><td>95</td></tr><tr><td>2</td><td>3</td><td>80</td></tr><tr><td>3</td><td>1</td><td>75</td></tr><tr><td>3</td><td>2</td><td>65</td></tr><tr><td>3</td><td>3</td><td>90</td></tr></tbody></table><p><strong>学生表</strong>中的每个学生都有一个唯一的<strong>学生ID</strong>。<strong>课程表</strong>中的每个课程都有一个唯一的<strong>课程ID</strong>。<strong>成绩表</strong>中的每条记录都包含一个<strong>学生ID</strong>和一个<strong>课程ID</strong>。<br><strong>成绩表中的学生ID</strong>和<strong>课程ID</strong>是<strong>外键</strong>，它们引用<strong>学生表</strong>和<strong>课程表</strong>中的<strong>主键</strong>。通过这些外键，我们可以将<strong>学生表</strong>、<strong>课程表</strong>和<strong>成绩表</strong>关联起来。<br>例如，我们可以查询所有学生的成绩。为此，我们可以将<strong>学生表</strong>和<strong>成绩表</strong>连接起来。连接条件是<strong>学生表</strong>中的<strong>学生ID</strong>和<strong>成绩表</strong>中的<strong>学生ID</strong>相等。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    学生姓名,</span><br><span class="line">    课程名称,</span><br><span class="line">    成绩</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    学生</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span></span><br><span class="line">    成绩</span><br><span class="line"><span class="keyword">ON</span></span><br><span class="line">    学生.学生ID <span class="operator">=</span> 成绩.学生ID;</span><br></pre></td></tr></table></figure><p>这个查询将返回以下结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">| 学生姓名 | 课程名称 | 成绩 |</span><br><span class="line">|---|---|---|</span><br><span class="line">| 张三 | 数学 | 90 |</span><br><span class="line">| 张三 | 语文 | 80 |</span><br><span class="line">| 张三 | 英语 | 70 |</span><br><span class="line">| 李四 | 数学 | 85 |</span><br><span class="line">| 李四 | 语文 | 95 |</span><br><span class="line">| 李四 | 英语 | 80 |</span><br><span class="line">| 王五 | 数学 | 75 |</span><br><span class="line">| 王五 | 语文 | 65 |</span><br><span class="line">| 王五 | 英语 | 90 |</span><br></pre></td></tr></table></figure><p><strong>关系数据库</strong>这种结构的好处在于它类似于电子表格，因此<strong>易于理解和使用</strong>。并且可以确保数据的<strong>完整性</strong>和<strong>一致性</strong>。但相对的，它的结构是固定的，灵活性和可拓展性不如其他数据库。</p><h2 id="关系数据库的特点"><a href="#关系数据库的特点" class="headerlink" title="关系数据库的特点"></a>关系数据库的特点</h2><ol><li><strong>数据结构化</strong>：数据存储在表中。每个表都包含行和列。行代表数据中的记录，列代表记录的属性。</li><li><strong>数据独立性</strong>：数据独立于应用程序。应用程序可以通过SQL语句来访问和操作数据，而无需更改应用程序代码。</li><li><strong>数据共享性</strong>：数据可以在多个应用程序之间共享。这可以提高数据的利用率和效率。</li><li><strong>数据完整性</strong>：关系型数据库可以通过完整性约束来确保数据的完整性。完整性约束可以确保数据准确、一致和可靠。</li><li><strong>事务性</strong>：支持事务。事务是一组操作，要么全部成功，要么全部失败。这可以确保数据的一致性。</li><li><strong>安全性</strong>：可以通过权限控制来确保数据的安全性。权限控制可以限制用户对数据的访问和操作权限。</li><li><strong>易用性</strong>：提供了SQL语言来访问和操作数据。SQL语言是一种简单易学的语言。</li></ol><h2 id="数据库管理系统-DBMS-Database-Management-System"><a href="#数据库管理系统-DBMS-Database-Management-System" class="headerlink" title="数据库管理系统 DBMS(Database Management System)"></a>数据库管理系统 DBMS(Database Management System)</h2><p><strong>Database</strong> 是存储数据的集合。通常由多个表组成，每个表包含一个或多个字段。<br><strong>而DBMS</strong> 是用于管理数据库的软件系统。提供一系列功能来创建、维护和访问数据库。它可以管理多个数据库，一个数据库可以由多个用户使用。<br>简而言之，Database是数据集合，可以使用DBMS来管理Database。<br>但是，DBMS是一种服务器应用程序，通常在服务器上运行，它没有图形界面，所以我们一般使用为管理DBMS而设计的客户端应用程序与DBMS通信。除此之外，还有其他的客户端应用程序，它们使用DBMS提供服务，比如说网络游戏、酒店预订网站以及ATM上的软件。</p><h1 id="一些术语"><a href="#一些术语" class="headerlink" title="一些术语"></a>一些术语</h1><ul><li>关系(Relation)：是一个数学概念，其物理形式是一个<strong>有列和行</strong>的<strong>表</strong>。</li><li>属性(Attribute)：是关系中的有命名的<strong>一列</strong>。</li><li>域(Domain)：是允许属性值的<strong>集合</strong>。</li><li>元组(Tuple)：是关系的<strong>一行</strong>。（元组的顺序并不重要）</li><li>程度(Dgree)：关系的程度就是它所包含的<strong>属性的数量</strong>。</li><li>基数(Cardinality)：关系中元组的数量。</li></ul><p>对于某些术语，我们有其他的叫法：</p><table><thead><tr><th>正式的术语</th><th>允许的叫法</th><th>允许的叫法</th></tr></thead><tbody><tr><td>关系(Relation)</td><td>表格(Table)</td><td>文件(File)</td></tr><tr><td>元组(Tuple)</td><td>行(Raw)</td><td>记录(Record)</td></tr><tr><td>属性(Attribute)</td><td>列(Column)</td><td>字段(Field)</td></tr></tbody></table><h2 id="关系的键"><a href="#关系的键" class="headerlink" title="关系的键"></a>关系的键</h2><ul><li>关系中<strong>不允许重复的元组</strong>。</li><li>因此，我们需要能够<strong>识别一个或多个属性</strong>(称为关系键)，唯一地标识关系中的每个元组。</li></ul><ol><li><strong>超级键(Superkey)：</strong>在关系中唯一标识元组的一个属性或一组属性。<ul><li>其可能包含唯一标识所不需要的额外属性。</li></ul></li><li><strong>候选键(Candidate key)：</strong>在关系中没有一个真子集是超级键的一种超级键。<ul><li>一个关系可能有多个候选键。</li></ul></li><li><strong>主键(Primary key)：</strong>被选中的候选键，用于在关系中唯一地标识元组。<ul><li>未被选作主键的候选键称为备用键。</li><li>一个关系<strong>只能有</strong>一个主键。</li></ul></li><li><strong>复合键(Composite key)：</strong>当一个键由多个属性组成时，我们称之为复合键。</li></ol><p><img src="https://ooo.0x0.ooo/2024/03/05/Oycb7s.png" alt="图片 1.png"></p><ol start="5"><li><strong>外键(Foreign key)：</strong>一个关系中的一个或多个属性，必须匹配某个(可能是同一个)关系的候选键。</li></ol><h1 id="数据库语言"><a href="#数据库语言" class="headerlink" title="数据库语言"></a>数据库语言</h1><p>数据库有自己的“编程语言”，称为<strong>结构化查询语言 SQL (Structured Query Language)。</strong><br>SQL有三个重要部分:</p><ul><li><strong>数据定义语言(DDL)：</strong>允许用户指定要存储在数据库中的数据的数据类型和结构以及约束。</li><li><strong>数据操作语言(DML)：</strong>允许用户从数据库中插入、更新、删除和检索数据</li><li><strong>数据控制语言(Data Control Language, DCL)：</strong>处理数据库系统的权限、权限和其他控制。</li></ul><p>此外还有<strong>流控制(if, else, loops)，</strong>这些内容包含在PL&#x2F;SQL和Transact-SQL等扩展中。</p><h2 id="SQL启动！"><a href="#SQL启动！" class="headerlink" title="SQL启动！"></a>SQL启动！</h2><h3 id="第一步：创建数据库-数据定义语言"><a href="#第一步：创建数据库-数据定义语言" class="headerlink" title="第一步：创建数据库(数据定义语言)"></a>第一步：创建数据库(数据定义语言)</h3><p>数据库的创建十分简单，在<strong>console</strong>中输入：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> SCHEMA name;</span><br><span class="line"><span class="keyword">CREATE</span> DATABASE name;</span><br></pre></td></tr></table></figure><p>这两种写法<strong>均可创建数据库</strong>。<br>进入新建的数据库，我们可以<strong>新建表格</strong>，表格的建立也十分简单：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> [IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>] tablename (</span><br><span class="line">  column1 <span class="type">INT</span>,</span><br><span class="line">  column2 <span class="type">VARCHAR</span>(<span class="number">40</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>这段DDL中，”[]”中的内容是选加的，表示如果数据库中<strong>不存在则建立</strong>。<br>“tablename”为表格的名称。如果需要两个单词相连接，建议使用”word1_word2”的形式。也可以使用<code>word1 word2</code>的这种写法，但是这<strong>不是标准写法</strong>。<br>“column1”, “column2”是属性的名称，后面跟着的是<strong>数据类型</strong>。在数据类型后面，可以添加”<strong>NOT NULL</strong>“，表示输入时这一列<strong>不能填入</strong>NULL值。除此之外，还可以添加”<strong>PRIMARY KEY</strong>“来设定<strong>主键</strong>。</p><h3 id="第二步：插入数据-数据操作语言"><a href="#第二步：插入数据-数据操作语言" class="headerlink" title="第二步：插入数据(数据操作语言)"></a>第二步：插入数据(数据操作语言)</h3><p>我们使用<code>INSERT</code>指令来插入数据，对于刚刚创建的表格，我们可以：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tablename <span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">12</span>, <span class="string">&#x27;小马&#x27;</span>),</span><br><span class="line">(<span class="number">18</span>, <span class="string">&#x27;企鹅&#x27;</span>)；</span><br></pre></td></tr></table></figure><p>默认来说，你输入数据的<strong>顺序</strong>，需要与表中的数据顺序<strong>相一致</strong>。但是也可以这么做：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tablename (column2, column1) <span class="keyword">VALUES</span></span><br><span class="line">(<span class="string">&#x27;小马&#x27;</span>, <span class="number">12</span>),</span><br><span class="line">(<span class="string">&#x27;企鹅&#x27;</span>, <span class="number">18</span>);</span><br></pre></td></tr></table></figure><p>这样定义了输入数据的顺序，就可以在底下按照自己的想法输入了。<br>如果想要<strong>删除数据</strong>，我们可以这样做：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> tablename <span class="keyword">WHERE</span> column2 <span class="operator">=</span> <span class="string">&#x27;企鹅&#x27;</span>;</span><br></pre></td></tr></table></figure><p>选定表，并使用<code>WHERE</code>来<strong>确定</strong>需要删除的元素。<br>除此之外，我们可以使用<code>UPDATE</code>来对表进行更改：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> tablename <span class="keyword">set</span> column1 <span class="operator">=</span> <span class="number">19</span> <span class="keyword">WHERE</span> column2 <span class="operator">=</span> <span class="string">&#x27;小马&#x27;</span>;</span><br></pre></td></tr></table></figure><p>如果想<strong>添加</strong>主键或者是<strong>添加</strong>一列怎么办？使用<code>ALTER</code>就行啦：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tablename <span class="keyword">ADD</span> <span class="keyword">PRIMARY</span> KEY (column2);</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tablename <span class="keyword">ADD</span> 学号 <span class="type">INT</span>;</span><br></pre></td></tr></table></figure><h3 id="第三步：未完待续…"><a href="#第三步：未完待续…" class="headerlink" title="第三步：未完待续…"></a>第三步：未完待续…</h3><h2 id="SQL中的数据类型"><a href="#SQL中的数据类型" class="headerlink" title="SQL中的数据类型"></a>SQL中的数据类型</h2><h3 id="数值类型："><a href="#数值类型：" class="headerlink" title="数值类型："></a>数值类型：</h3><ul><li><strong>整数类型：</strong> <ul><li><code>TINYINT</code>：<ul><li>存储 1 个字节的整数</li><li>范围为 -128 到 127</li></ul></li><li><code>SMALLINT</code>：<ul><li>存储 2 个字节的整数</li><li>范围为 -32,768 到 32,767</li></ul></li><li><code>MEDIUMINT</code>：<ul><li>存储 3 个字节的整数</li><li>范围为 -8,388,608 到 8,388,607</li></ul></li><li><code>INT</code>：<ul><li>存储 4 个字节的整数</li><li>范围为 -2,147,483,648 到 2,147,483,647</li></ul></li><li><code>BIGINT</code>：<ul><li>存储 8 个字节的整数</li><li>范围为 -9,223,372,036,854,775,808 到 9,223,372,036,854,775,807</li></ul></li></ul></li><li><strong>小数类型：</strong> <ul><li><code>FLOAT</code>：<ul><li>存储 4 个字节的浮点数</li><li>精度为 7 位小数</li></ul></li><li><code>DOUBLE</code>：<ul><li>存储 8 个字节的浮点数</li><li>精度为 15 位小数</li></ul></li><li><code>DECIMAL</code>：<ul><li>存储定点数</li><li>可以指定精度和小数位数</li></ul></li></ul></li></ul><h3 id="字符类型："><a href="#字符类型：" class="headerlink" title="字符类型："></a>字符类型：</h3><ul><li><strong>固定长度字符串类型：</strong> <ul><li><code>CHAR(n)</code>：存储 n 个字符的固定长度字符串，不足 n 个字符时用空格填充。</li></ul></li><li><strong>可变长度字符串类型：</strong> <ul><li><code>VARCHAR(n)</code>：存储最多 n 个字符的可变长度字符串，实际存储空间取决于字符串的实际长度。</li><li><code>TEXT</code>：存储长文本数据，最大长度为 65,535 个字节。</li></ul></li></ul><h3 id="日期和时间类型："><a href="#日期和时间类型：" class="headerlink" title="日期和时间类型："></a>日期和时间类型：</h3><ul><li><code>DATE</code>：存储日期数据，格式为 YYYY-MM-DD。</li><li><code>TIME</code>：存储时间数据，格式为 HH:MM:SS。</li><li><code>DATETIME</code>：存储日期和时间数据，格式为 YYYY-MM-DD HH:MM:SS。</li><li><code>TIMESTAMP</code>：存储日期和时间数据，并带有时间戳，可以精确到微秒。</li></ul><h3 id="二进制类型："><a href="#二进制类型：" class="headerlink" title="二进制类型："></a>二进制类型：</h3><ul><li><code>BLOB</code>：存储二进制数据，最大长度为 65,535 个字节。</li><li><code>TEXTBLOB</code>：存储长二进制数据，最大长度为 2 GB。</li></ul><h1 id="未完待续…"><a href="#未完待续…" class="headerlink" title="未完待续…"></a>未完待续…</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;什么是数据库？&quot;&gt;&lt;a href=&quot;#什么是数据库？&quot; class=&quot;headerlink&quot; title=&quot;什么是数据库？&quot;&gt;&lt;/a&gt;什么是数据库？&lt;/h1&gt;&lt;p&gt;数据库是&lt;strong&gt;以一定方式&lt;/strong&gt;存储&lt;strong&gt;大量数据&lt;/strong&gt;的</summary>
      
    
    
    
    <category term="大学生涯" scheme="http://example.com/categories/%E5%A4%A7%E5%AD%A6%E7%94%9F%E6%B6%AF/"/>
    
    
    <category term="学习" scheme="http://example.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="MySQL" scheme="http://example.com/tags/MySQL/"/>
    
    <category term="CPT103" scheme="http://example.com/tags/CPT103/"/>
    
  </entry>
  
  <entry>
    <title>INT104-Tutorial 1</title>
    <link href="http://example.com/2024/03/04/INT104-Tutorial%201/"/>
    <id>http://example.com/2024/03/04/INT104-Tutorial%201/</id>
    <published>2024-03-04T10:21:23.000Z</published>
    <updated>2024-03-07T07:47:02.158Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Jupyter-Notebook"><a href="#Jupyter-Notebook" class="headerlink" title="Jupyter Notebook"></a>Jupyter Notebook</h2><p>Jupyter Notebook 是一个基于网页的交互式计算环境，用于创建和共享程序文档。它支持多种编程语言，包括 Python、R、Julia、JavaScript 等。<br>其本质是一个 Web 应用程序，它由以下几个部分组成：</p><ul><li><strong>内核</strong>：负责执行代码并生成结果。</li><li><strong>前端</strong>：用于输入代码和查看结果。</li><li><strong>文档</strong>：包含代码、文本、数学方程、可视化等内容。</li></ul><p>主要特点包括：</p><ul><li><strong>交互性</strong>：可以逐行执行代码，并立即查看结果。</li><li><strong>可编辑性</strong>：可以随时修改代码并重新执行。</li><li><strong>可分享性</strong>：可以将笔记本以 .ipynb 格式导出或发布到互联网上。</li></ul><p>所以学校选择使用Jupyter来教学Python。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="安装Anaconda-Navigator（另一种安装方式）"><a href="#安装Anaconda-Navigator（另一种安装方式）" class="headerlink" title="安装Anaconda-Navigator（另一种安装方式）"></a>安装Anaconda-Navigator（另一种安装方式）</h3><p>进入<a href="https://www.anaconda.com/download">https://www.anaconda.com/download</a>，下载系统对应的版本即可。<br>跟着图形安装界面安装即可，打开后<strong>可安装Python环境</strong>以及<strong>Jupyter Notebook</strong>。</p><h3 id="安装pip"><a href="#安装pip" class="headerlink" title="安装pip"></a>安装pip</h3><p>在安装Jupyter<strong>之前</strong>，我们需要<strong>先安装pip</strong>。<br><strong>（记得先安装Python，进入官网下载安装包安装即可，建议安装时勾选加入环境变量）</strong></p><h4 id="For-Windows"><a href="#For-Windows" class="headerlink" title="For Windows"></a>For Windows</h4><ul><li><p>前往<a href="https://pypi.python.org/pypi/pip#downloads">pip下载</a> 来下载，<strong>建议选择tar.gz压缩包</strong></p></li><li><p>将下载的安装包解压到工作目录（此处举例为<strong>D:\pip-24.0</strong>），使用<strong>terminal&#x2F;cmd</strong>运行以下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /d D:\pip-24.0</span><br><span class="line">python setup.py install</span><br></pre></td></tr></table></figure></li><li><p>安装成功后，重新进入命令行输入<code>pip</code>, 即可看到帮助文档</p></li></ul><h4 id="For-Mac"><a href="#For-Mac" class="headerlink" title="For Mac"></a>For Mac</h4><ul><li>进入<a href="https://bootstrap.pypa.io/">get-pip.py下载</a>，<strong>找到</strong>get-pip.py，对它<strong>右键</strong>并点击<strong>下载链接文件</strong>，获得get-pip.py这一文件</li><li>在<code>启动台-其他-终端</code>中找到并打开<strong>终端</strong>，输入<code>sudo python3 &lt;将文件拖入&gt;</code>（拖入文件前一定要输入<strong>空格</strong>！）后回车。</li><li>会提示<strong>输入密码</strong>，需要输入<strong>电脑开机密码</strong>。输入时<strong>不会显示</strong>，完成后回车即可。</li><li>安装完成后，输入<code>pip --version</code>来验证pip是否安装成功。如果安装成功，应能看到pip的<strong>版本信息</strong>。</li></ul><h3 id="安装Jupyter-Notebook"><a href="#安装Jupyter-Notebook" class="headerlink" title="安装Jupyter Notebook"></a>安装Jupyter Notebook</h3><p>在Termial&#x2F;cmd中输入<code>pip install jupyter</code>，mac需要输入<code>pip3 install jupyter</code>即可<strong>自动完成安装</strong>。<br>安装完成后，输入<code>Jupyter Notebook</code>即可启动。若自动跳转的网页<strong>无法访问</strong>，可在终端中找到<code>http://localhost:8888/...</code>或<code>http://127.0.0.1:8888/...</code><strong>完整复制</strong>到浏览器中打开。</p><h2 id="Jupyter-Notebook启动！"><a href="#Jupyter-Notebook启动！" class="headerlink" title="Jupyter Notebook启动！"></a>Jupyter Notebook启动！</h2><h3 id="基本类型的认识"><a href="#基本类型的认识" class="headerlink" title="基本类型的认识"></a>基本类型的认识</h3><p>Python的变量类型：<br><img src="https://kafuchino123.github.io/pictures/INT104-T1/types.png" alt="image.png"><br>Python的变量<strong>不需要</strong>去定义类型，<strong>直接创建</strong>即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="string">&quot;10&quot;</span> <span class="comment"># 创建字符串</span></span><br><span class="line">y = <span class="string">&quot;20&quot;</span></span><br><span class="line">x + y <span class="comment"># Out: &#x27;1020&#x27;</span></span><br></pre></td></tr></table></figure><p>由于是字符串相加，所以是将两者<strong>直接连接</strong>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">10</span></span><br><span class="line">y = <span class="string">&quot;20&quot;</span></span><br><span class="line">x + y</span><br></pre></td></tr></table></figure><p>若是int+str，则会报错（这不是必然的吗。。）<br>所以我们需要使用<code>int(y)</code>将字符串类型的y<strong>强制转换</strong>成int。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">10</span></span><br><span class="line">y = <span class="string">&quot;20&quot;</span></span><br><span class="line">x + <span class="built_in">int</span>(y) <span class="comment"># int()强制转换 Out: 30</span></span><br></pre></td></tr></table></figure><p>我们可以通过给变量乘上数字来实现多次输出，也可以使用“.”操作符来执行一些操作，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="string">&quot;小🐴&quot;</span></span><br><span class="line">y = <span class="string">&quot;Swift &quot;</span></span><br><span class="line">x + <span class="string">&quot; &quot;</span> + y * <span class="number">3</span> <span class="comment"># Out: &#x27;小🐴 Swift Swift Swift &#x27;</span></span><br><span class="line"></span><br><span class="line">a = <span class="string">&quot;xiaoma&quot;</span></span><br><span class="line">a = a.upper()</span><br><span class="line">b = <span class="string">&quot;CSharp&quot;</span></span><br><span class="line">b = b.lower()</span><br><span class="line">a + <span class="string">&quot; &quot;</span> + b <span class="comment"># Out: &#x27;XIAOMA csharp&#x27;</span></span><br></pre></td></tr></table></figure><p>除此之外，输入<code>dir(&#39;str&#39;)</code>即可查看str的<strong>所有方法</strong>。<br>输出时，若想将str与int相连接，应将int强制转换为str。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">6</span></span><br><span class="line">x = x * <span class="number">3</span> / <span class="number">4</span></span><br><span class="line"><span class="string">&quot;小🐴说: &quot;</span> + <span class="built_in">str</span>(x) <span class="comment"># 强制转换 Out: &#x27;小🐴说: 4.5&#x27;</span></span><br></pre></td></tr></table></figure><p>对于<strong>换行</strong>，Python拥有<strong>两种</strong>写法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="string">&quot;&quot;&quot;你可以</span></span><br><span class="line"><span class="string">自己</span></span><br><span class="line"><span class="string">打回车&quot;&quot;&quot;</span></span><br><span class="line">y = <span class="string">&quot;也可以\n使用\n换行符&quot;</span></span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line"><span class="built_in">print</span>(y)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Out: 你可以</span></span><br><span class="line"><span class="string">     自己</span></span><br><span class="line"><span class="string">     打回车</span></span><br><span class="line"><span class="string">     也可以</span></span><br><span class="line"><span class="string">     使用</span></span><br><span class="line"><span class="string">     换行符</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="Lists-Tuples-Sets-and-Dictionaries"><a href="#Lists-Tuples-Sets-and-Dictionaries" class="headerlink" title="Lists, Tuples, Sets and Dictionaries"></a>Lists, Tuples, Sets and Dictionaries</h3><p>列表：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">fruits = [<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;orange&quot;</span>, <span class="string">&quot;tomato&quot;</span>, <span class="string">&quot;banana&quot;</span>] <span class="comment"># 创建了一个名为“fruits”的List</span></span><br><span class="line"><span class="comment">#            0         1         2         3</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(fruits)) <span class="comment"># Out: &lt;class &#x27;list&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(fruits) <span class="comment"># Out: [&#x27;apple&#x27;, &#x27;orange&#x27;, &#x27;tomato&#x27;, &#x27;banana&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(fruits[<span class="number">2</span>]) <span class="comment"># Out: &#x27;tomato&#x27;</span></span><br><span class="line">fruits[<span class="number">2</span>] = <span class="string">&quot;potato&quot;</span> <span class="comment"># 将第二位的改为了&quot;potato&quot;</span></span><br><span class="line"><span class="built_in">print</span>(fruits) <span class="comment"># Out: [&#x27;apple&#x27;, &#x27;orange&#x27;, &#x27;potato&#x27;, &#x27;banana&#x27;]</span></span><br><span class="line"></span><br><span class="line">fruits.append(<span class="string">&quot;cherry&quot;</span>) <span class="comment"># 向列表中添加新物品</span></span><br><span class="line"><span class="built_in">print</span>(fruits) <span class="comment"># Out: [&#x27;apple&#x27;, &#x27;orange&#x27;, &#x27;potato&#x27;, &#x27;banana&#x27;, &#x27;cherry&#x27;]</span></span><br><span class="line">fruits.remove(<span class="string">&quot;orange&quot;</span>) <span class="comment"># 从列表中删除橙子</span></span><br><span class="line"><span class="built_in">print</span>(fruits) <span class="comment"># Out: [&#x27;apple&#x27;, &#x27;potato&#x27;, &#x27;banana&#x27;, &#x27;cherry&#x27;]</span></span><br><span class="line"></span><br><span class="line">nums = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">0</span>, <span class="number">100</span>, <span class="number">5</span>)) <span class="comment"># 使用range(起始，终止，步长)来创建列表(不包括终止)</span></span><br><span class="line"><span class="built_in">print</span>(nums) <span class="comment"># Out: [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95]</span></span><br><span class="line">num2 = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">10</span>)) <span class="comment"># range(0, 10, 1)</span></span><br><span class="line"><span class="built_in">print</span>(num2) <span class="comment"># Out: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span></span><br><span class="line"><span class="built_in">print</span>(nums[<span class="number">0</span>:<span class="number">5</span>:<span class="number">2</span>]) <span class="comment"># 从项0(起始点)到项5(终点，不包括在内)，步长为2</span></span><br><span class="line"><span class="built_in">print</span>(nums[<span class="number">0</span>:<span class="number">3</span>]) <span class="comment"># 获取0到3项(不包括第3项)</span></span><br><span class="line"><span class="built_in">print</span>(nums[<span class="number">4</span>:]) <span class="comment"># 获取第4项之后的内容</span></span><br><span class="line"><span class="built_in">print</span>(nums[-<span class="number">1</span>]) <span class="comment"># 获取最后一项</span></span><br><span class="line"><span class="built_in">print</span>(nums[::-<span class="number">1</span>]) <span class="comment"># 把整个列表倒过来</span></span><br><span class="line"><span class="comment"># 可以使用len(), max(), min()来获取列表的某些数值</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(nums)) <span class="comment"># Out: 20</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">max</span>(nums)) <span class="comment"># Out: 95</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">min</span>(nums)) <span class="comment"># Out: 0</span></span><br><span class="line"></span><br><span class="line">mixed = [<span class="number">3</span>, <span class="string">&quot;Two&quot;</span>, <span class="literal">True</span>, <span class="literal">None</span>] <span class="comment"># 列表可以是混合的</span></span><br><span class="line"><span class="built_in">print</span>(mixed) <span class="comment"># Out: [3, &#x27;Two&#x27;, True, None]</span></span><br></pre></td></tr></table></figure><p>元组：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fruits = (<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;orange&quot;</span>, <span class="string">&quot;tomato&quot;</span>, <span class="string">&quot;banana&quot;</span>) <span class="comment"># 现在tomato永远是一种水果了</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(fruits)) <span class="comment"># Out: &lt;class &#x27;tuple&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(fruits) <span class="comment"># Out: (&#x27;apple&#x27;, &#x27;orange&#x27;, &#x27;tomato&#x27;, &#x27;banana&#x27;)</span></span><br></pre></td></tr></table></figure><p>元组和列表的区别不大，最明显的就是元素不可更改：</p><table><thead><tr><th>特性</th><th>列表</th><th>元组</th></tr></thead><tbody><tr><td>可变性</td><td>可变</td><td>不可变</td></tr><tr><td>内存使用</td><td>更多</td><td>更少</td></tr><tr><td>性能</td><td>更慢</td><td>更快</td></tr><tr><td>创建语法</td><td>[]</td><td>()</td></tr><tr><td>访问语法</td><td>list[index]</td><td>tuple[index]</td></tr><tr><td>切片语法</td><td>list[start:stop]</td><td>tuple[start:stop]</td></tr><tr><td>连接操作</td><td>+</td><td>+</td></tr><tr><td>乘法操作</td><td>*</td><td>*</td></tr><tr><td>成员运算符</td><td>in</td><td>in</td></tr></tbody></table><p>集合：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">x = &#123;<span class="number">3</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>&#125; <span class="comment"># 直接创建的集合</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(x)) <span class="comment"># Out: &lt;class &#x27;set&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(x) <span class="comment"># Out: &#123;1, 2, 3&#125;</span></span><br><span class="line"><span class="comment"># 集合中的元素不重复</span></span><br><span class="line">y = <span class="built_in">set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>]) <span class="comment"># 从列表创建的集合</span></span><br><span class="line"><span class="built_in">print</span>(x == y) <span class="comment"># x和y是相同的 Out: True</span></span><br></pre></td></tr></table></figure><p>字典：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">serendipity = &#123;<span class="string">&quot;🐴&quot;</span>: <span class="string">&quot;小马&quot;</span>,</span><br><span class="line">               <span class="string">&quot;🐧&quot;</span>: <span class="string">&quot;阿斌&quot;</span>,</span><br><span class="line">               <span class="string">&quot;🐟&quot;</span>: <span class="string">&quot;苏辰&quot;</span>,</span><br><span class="line">               <span class="string">&quot;🍚&quot;</span>: <span class="string">&quot;小白&quot;</span>,</span><br><span class="line">               <span class="string">&quot;☀️&quot;</span>: <span class="string">&quot;阳神&quot;</span>,</span><br><span class="line">               <span class="string">&quot;🆘&quot;</span>: <span class="string">&quot;拯救者&quot;</span>&#125; <span class="comment"># 创建了一个字典</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(serendipity)) <span class="comment"># Out: &lt;class &#x27;dict&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(serendipity) <span class="comment"># Out: &#123;&#x27;🐴&#x27;: &#x27;小马&#x27;, &#x27;🐧&#x27;: &#x27;阿斌&#x27;, &#x27;🐟&#x27;: &#x27;苏辰&#x27;, &#x27;🍚&#x27;: &#x27;小白&#x27;, &#x27;☀️&#x27;: &#x27;阳神&#x27;, &#x27;🆘&#x27;: &#x27;拯救者&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line">serendipity.update(&#123;<span class="string">&quot;🥣&quot;</span>: <span class="string">&quot;Jack&quot;</span>&#125;) <span class="comment"># 使用update来增加</span></span><br><span class="line"><span class="built_in">print</span>(serendipity) <span class="comment"># Out: &#123;&#x27;🐴&#x27;: &#x27;小马&#x27;, &#x27;🐧&#x27;: &#x27;阿斌&#x27;, &#x27;🐟&#x27;: &#x27;苏辰&#x27;, &#x27;🍚&#x27;: &#x27;小白&#x27;, &#x27;☀️&#x27;: &#x27;阳神&#x27;, &#x27;🆘&#x27;: &#x27;拯救者&#x27;, &#x27;🥣&#x27;: &#x27;Jack&#x27;&#125;</span></span><br><span class="line">serendipity.pop(<span class="string">&quot;🐧&quot;</span>) <span class="comment"># 使用pop来删除</span></span><br><span class="line"><span class="built_in">print</span>(serendipity) <span class="comment"># Out: &#123;&#x27;🐴&#x27;: &#x27;小马&#x27;, &#x27;🐟&#x27;: &#x27;苏辰&#x27;, &#x27;🍚&#x27;: &#x27;小白&#x27;, &#x27;☀️&#x27;: &#x27;阳神&#x27;, &#x27;🆘&#x27;: &#x27;拯救者&#x27;, &#x27;🥣&#x27;: &#x27;Jack&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(serendipity.keys()) <span class="comment"># 只获取字典的键 Out: dict_keys([&#x27;🐴&#x27;, &#x27;🐟&#x27;, &#x27;🍚&#x27;, &#x27;☀️&#x27;, &#x27;🆘&#x27;, &#x27;🥣&#x27;])</span></span><br><span class="line"><span class="built_in">print</span>(serendipity.values()) <span class="comment"># 只获取字典的值 Out: dict_values([&#x27;小马&#x27;, &#x27;苏辰&#x27;, &#x27;小白&#x27;, &#x27;阳神&#x27;, &#x27;拯救者&#x27;, &#x27;Jack&#x27;])</span></span><br></pre></td></tr></table></figure><h2 id="尾声"><a href="#尾声" class="headerlink" title="尾声"></a>尾声</h2><p>本节课的内容相对来说比较<strong>基础</strong>，介绍了一些基本类型。夯实基础，才能建高楼，让我们一起进步！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Jupyter-Notebook&quot;&gt;&lt;a href=&quot;#Jupyter-Notebook&quot; class=&quot;headerlink&quot; title=&quot;Jupyter Notebook&quot;&gt;&lt;/a&gt;Jupyter Notebook&lt;/h2&gt;&lt;p&gt;Jupyter Notebo</summary>
      
    
    
    
    <category term="大学生涯" scheme="http://example.com/categories/%E5%A4%A7%E5%AD%A6%E7%94%9F%E6%B6%AF/"/>
    
    
    <category term="学习" scheme="http://example.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="INT104" scheme="http://example.com/tags/INT104/"/>
    
  </entry>
  
  <entry>
    <title>一些自动登录方法</title>
    <link href="http://example.com/2024/03/03/%E4%B8%80%E4%BA%9B%E8%87%AA%E5%8A%A8%E7%99%BB%E5%BD%95%E6%96%B9%E6%B3%95/"/>
    <id>http://example.com/2024/03/03/%E4%B8%80%E4%BA%9B%E8%87%AA%E5%8A%A8%E7%99%BB%E5%BD%95%E6%96%B9%E6%B3%95/</id>
    <published>2024-03-03T09:46:26.000Z</published>
    <updated>2024-03-03T14:10:44.396Z</updated>
    
    <content type="html"><![CDATA[<h2 id="自动登录"><a href="#自动登录" class="headerlink" title="自动登录"></a>自动登录</h2><p>上文说道，现在的惠湖通需要<strong>不定时</strong>打开登录页来登录，所以为何不使用Python来让其<strong>自动登录</strong>呢？<br>首先，我们需要引入<strong>Selenium库</strong>。Selenium是一个用于<strong>自动化Web浏览器</strong>操作的工具。它提供了一组工具和库，使开发人员能够通过编程方式控制浏览器的行为，从而执行各种任务，如<strong>网页测试</strong>、<strong>数据抓取</strong>和<strong>自动化任务</strong>等。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.wait <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br></pre></td></tr></table></figure><p>我使用了<strong>火狐浏览器</strong>，其可以直接通过Selenium调用，无需下载对应的驱动文件。并且设置页面加载超时时间为60秒。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">driver = webdriver.Firefox()</span><br><span class="line">driver.set_page_load_timeout(<span class="number">60</span>)</span><br></pre></td></tr></table></figure><p>接下来就是打开网页，定位输入框，以及点击按钮的操作。大部分主流浏览器都具有开发人员工具功能（Fn+F12），通过选择<strong>元素检查</strong>可以很容易地找到元素的ID，只需要将账号密码填入即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">driver.get(<span class="string">&#x27;http://10.10.16.12/portal/&#x27;</span>)</span><br><span class="line">wait = WebDriverWait(driver, <span class="number">10</span>)</span><br><span class="line">username = driver.find_element(By.ID,<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">username.send_keys(<span class="string">&#x27;188****0000&#x27;</span>)</span><br><span class="line">password = driver.find_element(By.ID,<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line">password.send_keys(<span class="string">&#x27;123321&#x27;</span>)</span><br></pre></td></tr></table></figure><p>相同的，按钮也可以使用这样的方法来定位。但是惠湖通界面上的似乎并不是普通的按钮，所以我使用了<strong>XPATH</strong>来定位并点击。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">login_button = driver.find_element(By.XPATH,<span class="string">&quot;//*[@id=&#x27;pcLoginCont&#x27;]/div/div[1]/div[1]/img&quot;</span>)</span><br><span class="line">login_button.click()</span><br></pre></td></tr></table></figure><p>如此，一个自动登录程序便<strong>完成</strong>了。</p><h2 id="以下内容并未测试"><a href="#以下内容并未测试" class="headerlink" title="以下内容并未测试"></a>以下内容并未测试</h2><p>但是这个程序仍需我们手动执行，我们是否可以让其<strong>定时运行</strong>呢？<br>答案是肯定的，但登录后的界面和未登录时的不一样，会导致找不到输入框和按钮。<br>于是，我觉得可以让程序自己<strong>先登出，再登录</strong>。（以下内容均并未实际运行过，只是提供思路，不考虑稳定性）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">driver = webdriver.Firefox()</span><br><span class="line">driver.set_page_load_timeout(<span class="number">60</span>)</span><br><span class="line"></span><br><span class="line">driver.get(<span class="string">&#x27;http://10.10.16.12/portal/&#x27;</span>)</span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    login_button1 = driver.find_element(By.ID,<span class="string">&quot;ispLogoutBtn&quot;</span>)</span><br><span class="line">    login_button1.click()</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    wait = WebDriverWait(driver, <span class="number">10</span>)</span><br><span class="line">    username = driver.find_element(By.ID,<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">    username.send_keys(<span class="string">&#x27;188****0000&#x27;</span>)</span><br><span class="line">    password = driver.find_element(By.ID,<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line">    password.send_keys(<span class="string">&#x27;123321&#x27;</span>)</span><br><span class="line">    login_button2 = driver.find_element(By.XPATH,<span class="string">&quot;//*[@id=&#x27;pcLoginCont&#x27;]/div/div[1]/div[1]/img&quot;</span>)</span><br><span class="line">    login_button2.click()</span><br></pre></td></tr></table></figure><p>如此一来，只要让程序在<strong>凌晨3点</strong>定时运行，就可以实现无感上网了。<br>当然，我们也可以让程序<strong>每隔一个小时</strong>ping三次baidu，如果三次<strong>均失败</strong>，则认定为断网，<strong>运行</strong>自动登录程序。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">ping_baidu</span>():</span><br><span class="line">    <span class="comment"># Ping百度3次</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        response = os.system(<span class="string">&quot;ping -c 1 www.baidu.com&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> response == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Ping 百度成功！&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Ping 百度失败...&quot;</span>)</span><br><span class="line">            time.sleep(<span class="number">5</span>)  <span class="comment"># 等待5秒后重试</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run_program</span>():</span><br><span class="line">    driver = webdriver.Firefox()</span><br><span class="line">    driver.set_page_load_timeout(<span class="number">60</span>)</span><br><span class="line"></span><br><span class="line">    driver.get(<span class="string">&#x27;http://10.10.16.12/portal/&#x27;</span>)</span><br><span class="line">    wait = WebDriverWait(driver, <span class="number">10</span>)</span><br><span class="line">    username = driver.find_element(By.ID, <span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">    username.send_keys(<span class="string">&#x27;188****0000&#x27;</span>)</span><br><span class="line">    password = driver.find_element(By.ID, <span class="string">&#x27;password&#x27;</span>)</span><br><span class="line">    password.send_keys(<span class="string">&#x27;123321&#x27;</span>)</span><br><span class="line">    login_button = driver.find_element(By.XPATH, <span class="string">&quot;//*[@id=&#x27;pcLoginCont&#x27;]/div/div[1]/div[1]/img&quot;</span>)</span><br><span class="line">    login_button.click()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> ping_baidu():</span><br><span class="line">            run_program()</span><br><span class="line">        time.sleep(<span class="number">3600</span>)  <span class="comment"># 每隔一个小时执行一次</span></span><br></pre></td></tr></table></figure><p>这个当然也存在<strong>弊端</strong>，运行间隔足足<strong>一个小时</strong>，可能会导致处理<strong>不及时</strong>。</p><h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><p>这个主意<strong>很久之前</strong>就有了，但是我<strong>没有实际投入运行</strong>。我宿舍里现在是一台笔记本和台式机。笔记本不知道什么时候就自动熄屏了，程序也不知道能不能运行。而台式机会发出灯光以及风扇转动的声音，不方便开一整个晚上。所以最终还是<strong>回归最朴素</strong>的每天登一遍惠湖通咯。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;自动登录&quot;&gt;&lt;a href=&quot;#自动登录&quot; class=&quot;headerlink&quot; title=&quot;自动登录&quot;&gt;&lt;/a&gt;自动登录&lt;/h2&gt;&lt;p&gt;上文说道，现在的惠湖通需要&lt;strong&gt;不定时&lt;/strong&gt;打开登录页来登录，所以为何不使用Python来让其&lt;str</summary>
      
    
    
    
    <category term="生活日常" scheme="http://example.com/categories/%E7%94%9F%E6%B4%BB%E6%97%A5%E5%B8%B8/"/>
    
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="杂谈" scheme="http://example.com/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>对于慧湖通宿舍上网的一些拙见</title>
    <link href="http://example.com/2024/03/03/%E5%AF%B9%E4%BA%8E%E6%85%A7%E6%B9%96%E9%80%9A%E5%AE%BF%E8%88%8D%E4%B8%8A%E7%BD%91%E7%9A%84%E4%B8%80%E4%BA%9B%E6%8B%99%E8%A7%81/"/>
    <id>http://example.com/2024/03/03/%E5%AF%B9%E4%BA%8E%E6%85%A7%E6%B9%96%E9%80%9A%E5%AE%BF%E8%88%8D%E4%B8%8A%E7%BD%91%E7%9A%84%E4%B8%80%E4%BA%9B%E6%8B%99%E8%A7%81/</id>
    <published>2024-03-03T08:50:32.000Z</published>
    <updated>2024-03-03T15:00:39.721Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文缘人才公寓"><a href="#文缘人才公寓" class="headerlink" title="文缘人才公寓"></a>文缘人才公寓</h2><p>本人是22级新生，属于第一批入住文缘人才公寓的。在入住之前就曾听说，新宿舍区需要每个同学办理单独的宽带。也就是说，一间四人间就需要四个光猫，这当然是不可能的。在搬入后得知，不管你是什么运营商，你都需要通过慧湖通的登录界面进行连接，并且同时在线的设备数只能有三个。（前提是用的运营商提供的路由器，或者是根据所谓的“教程”设置后）<img src="https://ooo.0x0.ooo/2024/03/03/OyRqFg.jpg" alt="IMG_3812.JPG"><br>这个教程告诉同学们要<strong>关闭DHCP服务器</strong>，并且网线需要接在<strong>LAN口</strong>。如此一来，你的路由器就<strong>只是充当发射信号的装置</strong>，而<strong>不参与IP地址的分配</strong>等等一系列任务。所有设备的IP地址都是由慧湖通机房来分配，并且能够监控数据以及登录的设备量。</p><h2 id="反抗第一步-拨号上网"><a href="#反抗第一步-拨号上网" class="headerlink" title="反抗第一步-拨号上网"></a>反抗第一步-拨号上网</h2><p>面对这种情况，难道我们学生只能接受现实，去办理电话卡和宽带捆绑的套餐了吗？不！我们要反抗！可以看到慧湖通的这个界面，它很像是<strong>拨号上网</strong>。你需要输入账号密码并选择对应的运营商来登录。那为何不试试让路由器来拨号呢？经过尝试后，这确实是可行的。但不知道是什么原因，拨号的账号需要指定运营商。也就是说在<strong>手机号</strong> + <strong>@CMCC</strong> &#x2F; <strong>@TELECOM</strong>这样的形式（恕我知识浅薄）。</p><figure class="highlight plaintext"><figcaption><span>Example</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">188****0000@CMCC</span><br></pre></td></tr></table></figure><p>如此一来，不仅绕开了设备数量的限制，还获得了更好的网络体验（甚至公网）。</p><h2 id="慧湖通的策略"><a href="#慧湖通的策略" class="headerlink" title="慧湖通的策略"></a>慧湖通的策略</h2><p>但是好景不长。一学年之后，再度开学之时，很多小伙伴发现之前设置的<strong>拨号上网不行了</strong>。让路由器<strong>自动获取IP地址</strong>（保持DHCP服务器打开）虽然会弹出登录界面，但是不登录也可用。这个时候就能意识到，慧湖通在准备干一场大的。我不清楚他们是如何操作的，但是带来的后果就是宽带拨号的方式<strong>无法继续使用</strong>了，真真正正做到了所有数据都需要经过慧湖通。</p><h2 id="反抗第二步-DHCP服务器"><a href="#反抗第二步-DHCP服务器" class="headerlink" title="反抗第二步-DHCP服务器"></a>反抗第二步-DHCP服务器</h2><p>慧湖通这个登录，只要你<strong>断开连接</strong>后就自动给你<strong>下线</strong>。也就是说，只要你断开了Wi-Fi，当你再次连上时就必须重新登录。这就导致了一天内需要登录十几次的状况。还好慧湖通的认证并没有其他学校的那么严格，我们仍然可以将网线接入在<strong>WAN口</strong>，并保持<strong>DHCP服务器打开</strong>状态，让路由器<strong>为下游设备分配IP</strong>。这<strong>解决了连接数量</strong>的限制，但是对于登录账号，我们仍需要在tocken过期后，再次进入登录页面来登录。虽然只需要一次，但是它的不可预测以及手动输入账号密码仍不如之前的拨号上网（并且数据<strong>受慧湖通管控</strong>）。</p><h2 id="尾声"><a href="#尾声" class="headerlink" title="尾声"></a>尾声</h2><p>对于网络这方面的内容，我也只是一知半解。但是我认为这种半强行推销校园卡的行为真的不是很好。现在所有的设备都是经过慧湖通网关了，如果想要继续往下限制，肯定是能做到限制三台设备的。如果慧湖通真的要锁死三台，那我估计只能OpenWrt了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;文缘人才公寓&quot;&gt;&lt;a href=&quot;#文缘人才公寓&quot; class=&quot;headerlink&quot; title=&quot;文缘人才公寓&quot;&gt;&lt;/a&gt;文缘人才公寓&lt;/h2&gt;&lt;p&gt;本人是22级新生，属于第一批入住文缘人才公寓的。在入住之前就曾听说，新宿舍区需要每个同学办理单独的宽带。也就</summary>
      
    
    
    
    <category term="生活日常" scheme="http://example.com/categories/%E7%94%9F%E6%B4%BB%E6%97%A5%E5%B8%B8/"/>
    
    
    <category term="杂谈" scheme="http://example.com/tags/%E6%9D%82%E8%B0%88/"/>
    
    <category term="上网" scheme="http://example.com/tags/%E4%B8%8A%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>属于迟然的Hello World</title>
    <link href="http://example.com/2024/03/02/%E5%B1%9E%E4%BA%8E%E8%BF%9F%E7%84%B6%E7%9A%84Hello%20World/"/>
    <id>http://example.com/2024/03/02/%E5%B1%9E%E4%BA%8E%E8%BF%9F%E7%84%B6%E7%9A%84Hello%20World/</id>
    <published>2024-03-02T09:10:32.000Z</published>
    <updated>2024-03-03T14:10:56.115Z</updated>
    
    <content type="html"><![CDATA[<p>似水流年，花开花落。<br>不知不觉，我已寒窗苦读十四年。但我真的学到了什么东西吗？我不知道。所以我创建了这个blog，为了我当下的学习过程，也想向大家分享我的生活。<br>我并不知道我的未来是什么样的，作为一个p人，我没有也不会去刻意地规划。对于这个blog，当然也是对我自己，就请自然生长吧！</p><h2 id="敬请期待我的小作文"><a href="#敬请期待我的小作文" class="headerlink" title="敬请期待我的小作文"></a>敬请期待我的小作文</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;似水流年，花开花落。&lt;br&gt;不知不觉，我已寒窗苦读十四年。但我真的学到了什么东西吗？我不知道。所以我创建了这个blog，为了我当下的学习过程，也想向大家分享我的生活。&lt;br&gt;我并不知道我的未来是什么样的，作为一个p人，我没有也不会去刻意地规划。对于这个blog，当然也是对我</summary>
      
    
    
    
    <category term="生活日常" scheme="http://example.com/categories/%E7%94%9F%E6%B4%BB%E6%97%A5%E5%B8%B8/"/>
    
    
    <category term="杂谈" scheme="http://example.com/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
</feed>
